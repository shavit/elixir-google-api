# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Vault.V1.Model.Matter do
  @moduledoc """
  Represents a matter.

  ## Attributes

  *   `description` (*type:* `String.t`, *default:* `nil`) - The description of the matter.
  *   `matterId` (*type:* `String.t`, *default:* `nil`) - The matter ID which is generated by the server.
      Should be blank when creating a new matter.
  *   `matterPermissions` (*type:* `list(GoogleApi.Vault.V1.Model.MatterPermission.t)`, *default:* `nil`) - List of users and access to the matter. Currently there is no programmer
      defined limit on the number of permissions a matter can have.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the matter.
  *   `state` (*type:* `String.t`, *default:* `nil`) - The state of the matter.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :description => String.t(),
          :matterId => String.t(),
          :matterPermissions => list(GoogleApi.Vault.V1.Model.MatterPermission.t()),
          :name => String.t(),
          :state => String.t()
        }

  field(:description)
  field(:matterId)
  field(:matterPermissions, as: GoogleApi.Vault.V1.Model.MatterPermission, type: :list)
  field(:name)
  field(:state)
end

defimpl Poison.Decoder, for: GoogleApi.Vault.V1.Model.Matter do
  def decode(value, options) do
    GoogleApi.Vault.V1.Model.Matter.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Vault.V1.Model.Matter do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.ReplicaPool.V1beta1.Api.Pools do
  @moduledoc """
  API calls for all endpoints tagged `Pools`.
  """

  alias GoogleApi.ReplicaPool.V1beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Deletes a replica pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this replica pool.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `pool_name` (*type:* `String.t`) - The name of the replica pool for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:body` (*type:* `GoogleApi.ReplicaPool.V1beta1.Model.PoolsDeleteRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def replicapool_pools_delete(
        connection,
        project_name,
        zone,
        pool_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [decode: false])
  end

  @doc """
  Gets information about a single replica pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this replica pool.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `pool_name` (*type:* `String.t`) - The name of the replica pool for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Pool.t()} | {:error, Tesla.Env.t()}
  def replicapool_pools_get(
        connection,
        project_name,
        zone,
        pool_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}])
  end

  @doc """
  Inserts a new replica pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this replica pool.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:body` (*type:* `GoogleApi.ReplicaPool.V1beta1.Model.Pool.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_insert(Tesla.Env.client(), String.t(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Pool.t()} | {:error, Tesla.Env.t()}
  def replicapool_pools_insert(connection, project_name, zone, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/{projectName}/zones/{zone}/pools", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}])
  end

  @doc """
  List all replica pools.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this request.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:maxResults` (*type:* `integer()`) - Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
      *   `:pageToken` (*type:* `String.t`) - Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.PoolsListResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_list(Tesla.Env.client(), String.t(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.ReplicaPool.V1beta1.Model.PoolsListResponse.t()}
          | {:error, Tesla.Env.t()}
  def replicapool_pools_list(connection, project_name, zone, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :maxResults => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/{projectName}/zones/{zone}/pools", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.PoolsListResponse{}])
  end

  @doc """
  Resize a pool. This is an asynchronous operation, and multiple overlapping resize requests can be made. Replica Pools will use the information from the last resize request.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this replica pool.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `pool_name` (*type:* `String.t`) - The name of the replica pool for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:numReplicas` (*type:* `integer()`) - The desired number of replicas to resize to. If this number is larger than the existing number of replicas, new replicas will be added. If the number is smaller, then existing replicas will be deleted.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_resize(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Pool.t()} | {:error, Tesla.Env.t()}
  def replicapool_pools_resize(
        connection,
        project_name,
        zone,
        pool_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :numReplicas => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}/resize", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Pool{}])
  end

  @doc """
  Update the template used by the pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this replica pool.
  *   `zone` (*type:* `String.t`) - The zone for this replica pool.
  *   `pool_name` (*type:* `String.t`) - The name of the replica pool for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:body` (*type:* `GoogleApi.ReplicaPool.V1beta1.Model.Template.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_pools_updatetemplate(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def replicapool_pools_updatetemplate(
        connection,
        project_name,
        zone,
        pool_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}/updateTemplate", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [decode: false])
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the elixir code generator program.
# Do not edit the class manually.

defmodule GoogleApi.ReplicaPool.V1beta1.Api.Replicas do
  @moduledoc """
  API calls for all endpoints tagged `Replicas`.
  """

  alias GoogleApi.ReplicaPool.V1beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @doc """
  Deletes a replica from the pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this request.
  *   `zone` (*type:* `String.t`) - The zone where the replica lives.
  *   `pool_name` (*type:* `String.t`) - The replica pool name for this request.
  *   `replica_name` (*type:* `String.t`) - The name of the replica for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:body` (*type:* `GoogleApi.ReplicaPool.V1beta1.Model.ReplicasDeleteRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_replicas_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Replica.t()} | {:error, Tesla.Env.t()}
  def replicapool_replicas_delete(
        connection,
        project_name,
        zone,
        pool_name,
        replica_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1),
        "replicaName" => URI.encode(replica_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}])
  end

  @doc """
  Gets information about a specific replica.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this request.
  *   `zone` (*type:* `String.t`) - The zone where the replica lives.
  *   `pool_name` (*type:* `String.t`) - The replica pool name for this request.
  *   `replica_name` (*type:* `String.t`) - The name of the replica for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_replicas_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Replica.t()} | {:error, Tesla.Env.t()}
  def replicapool_replicas_get(
        connection,
        project_name,
        zone,
        pool_name,
        replica_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1),
        "replicaName" => URI.encode(replica_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}])
  end

  @doc """
  Lists all replicas in a pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this request.
  *   `zone` (*type:* `String.t`) - The zone where the replica pool lives.
  *   `pool_name` (*type:* `String.t`) - The replica pool name for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:maxResults` (*type:* `integer()`) - Maximum count of results to be returned. Acceptable values are 0 to 100, inclusive. (Default: 50)
      *   `:pageToken` (*type:* `String.t`) - Set this to the nextPageToken value returned by a previous list request to obtain the next page of results from the previous list request.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.ReplicasListResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_replicas_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.ReplicaPool.V1beta1.Model.ReplicasListResponse.t()}
          | {:error, Tesla.Env.t()}
  def replicapool_replicas_list(
        connection,
        project_name,
        zone,
        pool_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :maxResults => :query,
      :pageToken => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/{projectName}/zones/{zone}/pools/{poolName}/replicas", %{
        "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
        "zone" => URI.encode(zone, &URI.char_unreserved?/1),
        "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.ReplicasListResponse{}]
    )
  end

  @doc """
  Restarts a replica in a pool.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.ReplicaPool.V1beta1.Connection.t`) - Connection to server
  *   `project_name` (*type:* `String.t`) - The project ID for this request.
  *   `zone` (*type:* `String.t`) - The zone where the replica lives.
  *   `pool_name` (*type:* `String.t`) - The replica pool name for this request.
  *   `replica_name` (*type:* `String.t`) - The name of the replica for this request.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}}` on success
  *   `{:error, info}` on failure
  """
  @spec replicapool_replicas_restart(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.ReplicaPool.V1beta1.Model.Replica.t()} | {:error, Tesla.Env.t()}
  def replicapool_replicas_restart(
        connection,
        project_name,
        zone,
        pool_name,
        replica_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart",
        %{
          "projectName" => URI.encode(project_name, &URI.char_unreserved?/1),
          "zone" => URI.encode(zone, &URI.char_unreserved?/1),
          "poolName" => URI.encode(pool_name, &URI.char_unreserved?/1),
          "replicaName" => URI.encode(replica_name, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.ReplicaPool.V1beta1.Model.Replica{}])
  end
end

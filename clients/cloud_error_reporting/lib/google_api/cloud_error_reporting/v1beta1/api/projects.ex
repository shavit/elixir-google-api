# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudErrorReporting.V1beta1.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.CloudErrorReporting.V1beta1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Deletes all error events of a given project.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `projectName`. [Required] The resource name of the Google Cloud Platform project. Written
      as `projects/` plus the
      [Google Cloud Platform project
      ID](https://support.google.com/cloud/answer/6158840).
      Example: `projects/my-project-123`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.DeleteEventsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_delete_events(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.DeleteEventsResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_delete_events(
        connection,
        projects_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:delete)
      |> Request.url("/v1beta1/projects/{projectsId}/events", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.DeleteEventsResponse{}]
    )
  end

  @doc """
  Lists the specified events.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `projectName`. [Required] The resource name of the Google Cloud Platform project. Written
      as `projects/` plus the
      [Google Cloud Platform project
      ID](https://support.google.com/cloud/answer/6158840).
      Example: `projects/my-project-123`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:groupId` (*type:* `String.t`) - [Required] The group for which events shall be returned.
      *   `:pageSize` (*type:* `integer()`) - [Optional] The maximum number of results to return per response.
      *   `:pageToken` (*type:* `String.t`) - [Optional] A `next_page_token` provided by a previous response.
      *   `:"serviceFilter.resourceType"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).
      *   `:"serviceFilter.service"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).
      *   `:"serviceFilter.version"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).
      *   `:"timeRange.period"` (*type:* `String.t`) - Restricts the query to the specified time range.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.ListEventsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_events_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.ListEventsResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_events_list(
        connection,
        projects_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :groupId => :query,
      :pageSize => :query,
      :pageToken => :query,
      :"serviceFilter.resourceType" => :query,
      :"serviceFilter.service" => :query,
      :"serviceFilter.version" => :query,
      :"timeRange.period" => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/projects/{projectsId}/events", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.ListEventsResponse{}]
    )
  end

  @doc """
  Report an individual error event.

  This endpoint accepts **either** an OAuth token,
  **or** an [API key](https://support.google.com/cloud/answer/6158862)
  for authentication. To use an API key, append it to the URL as the value of
  a `key` parameter. For example:

  `POST
  https://clouderrorreporting.googleapis.com/v1beta1/projects/example-project/events:report?key=123ABC456`

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `projectName`. [Required] The resource name of the Google Cloud Platform project. Written
      as `projects/` plus the
      [Google Cloud Platform project
      ID](https://support.google.com/cloud/answer/6158840). Example:
      `projects/my-project-123`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Model.ReportedErrorEvent.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.ReportErrorEventResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_events_report(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.ReportErrorEventResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_events_report(
        connection,
        projects_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1beta1/projects/{projectsId}/events:report", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.ReportErrorEventResponse{}]
    )
  end

  @doc """
  Lists the specified groups.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `projectName`. [Required] The resource name of the Google Cloud Platform project. Written
      as <code>projects/</code> plus the
      <a href="https://support.google.com/cloud/answer/6158840">Google Cloud
      Platform project ID</a>.

      Example: <code>projects/my-project-123</code>.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:alignment` (*type:* `String.t`) - [Optional] The alignment of the timed counts to be returned.
          Default is `ALIGNMENT_EQUAL_AT_END`.
      *   `:alignmentTime` (*type:* `DateTime.t`) - [Optional] Time where the timed counts shall be aligned if rounded
          alignment is chosen. Default is 00:00 UTC.
      *   `:groupId` (*type:* `list(String.t)`) - [Optional] List all <code>ErrorGroupStats</code> with these IDs.
      *   `:order` (*type:* `String.t`) - [Optional] The sort order in which the results are returned.
          Default is `COUNT_DESC`.
      *   `:pageSize` (*type:* `integer()`) - [Optional] The maximum number of results to return per response.
          Default is 20.
      *   `:pageToken` (*type:* `String.t`) - [Optional] A `next_page_token` provided by a previous response. To view
          additional results, pass this token along with the identical query
          parameters as the first request.
      *   `:"serviceFilter.resourceType"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.resource_type`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.resource_type).
      *   `:"serviceFilter.service"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.service`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.service).
      *   `:"serviceFilter.version"` (*type:* `String.t`) - [Optional] The exact value to match against
          [`ServiceContext.version`](/error-reporting/reference/rest/v1beta1/ServiceContext#FIELDS.version).
      *   `:"timeRange.period"` (*type:* `String.t`) - Restricts the query to the specified time range.
      *   `:timedCountDuration` (*type:* `String.t`) - [Optional] The preferred duration for a single returned `TimedCount`.
          If not set, no timed counts are returned.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.ListGroupStatsResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_group_stats_list(
          Tesla.Env.client(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.ListGroupStatsResponse.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_group_stats_list(
        connection,
        projects_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :alignment => :query,
      :alignmentTime => :query,
      :groupId => :query,
      :order => :query,
      :pageSize => :query,
      :pageToken => :query,
      :"serviceFilter.resourceType" => :query,
      :"serviceFilter.service" => :query,
      :"serviceFilter.version" => :query,
      :"timeRange.period" => :query,
      :timedCountDuration => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/projects/{projectsId}/groupStats", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.ListGroupStatsResponse{}]
    )
  end

  @doc """
  Get the specified group.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `groupName`. [Required] The group resource name. Written as
      <code>projects/<var>projectID</var>/groups/<var>group_name</var></code>.
      Call
      <a href="/error-reporting/reference/rest/v1beta1/projects.groupStats/list">
      <code>groupStats.list</code></a> to return a list of groups belonging to
      this project.

      Example: <code>projects/my-project-123/groups/my-group</code>
  *   `groups_id` (*type:* `String.t`) - Part of `groupName`. See documentation of `projectsId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_groups_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_groups_get(
        connection,
        projects_id,
        groups_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/v1beta1/projects/{projectsId}/groups/{groupsId}", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "groupsId" => URI.encode(groups_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup{}]
    )
  end

  @doc """
  Replace the data for the specified group.
  Fails if the group does not exist.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Connection.t`) - Connection to server
  *   `projects_id` (*type:* `String.t`) - Part of `group.name`. The group resource name.
      Example: <code>projects/my-project-123/groups/my-groupid</code>
  *   `groups_id` (*type:* `String.t`) - Part of `group.name`. See documentation of `projectsId`.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup{}}` on success
  *   `{:error, info}` on failure
  """
  @spec clouderrorreporting_projects_groups_update(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup.t()}
          | {:error, Tesla.Env.t()}
  def clouderrorreporting_projects_groups_update(
        connection,
        projects_id,
        groups_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:put)
      |> Request.url("/v1beta1/projects/{projectsId}/groups/{groupsId}", %{
        "projectsId" => URI.encode(projects_id, &URI.char_unreserved?/1),
        "groupsId" => URI.encode(groups_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.CloudErrorReporting.V1beta1.Model.ErrorGroup{}]
    )
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Games.V1.Model.TurnBasedMatchTurn do
  @moduledoc """
  This is a JSON template for the object representing a turn.

  ## Attributes

  *   `data` (*type:* `GoogleApi.Games.V1.Model.TurnBasedMatchDataRequest.t`, *default:* `nil`) - The shared game state data after the turn is over.
  *   `kind` (*type:* `String.t`, *default:* `games#turnBasedMatchTurn`) - Uniquely identifies the type of this resource. Value is always the fixed string games#turnBasedMatchTurn.
  *   `matchVersion` (*type:* `integer()`, *default:* `nil`) - The version of this match: an increasing counter, used to avoid out-of-date updates to the match.
  *   `pendingParticipantId` (*type:* `String.t`, *default:* `nil`) - The ID of the participant who should take their turn next. May be set to the current player's participant ID to update match state without changing the turn. If not set, the match will wait for other player(s) to join via automatching; this is only valid if automatch criteria is set on the match with remaining slots for automatched players.
  *   `results` (*type:* `list(GoogleApi.Games.V1.Model.ParticipantResult.t)`, *default:* `nil`) - The match results for the participants in the match.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :data => GoogleApi.Games.V1.Model.TurnBasedMatchDataRequest.t(),
          :kind => String.t(),
          :matchVersion => integer(),
          :pendingParticipantId => String.t(),
          :results => list(GoogleApi.Games.V1.Model.ParticipantResult.t())
        }

  field(:data, as: GoogleApi.Games.V1.Model.TurnBasedMatchDataRequest)
  field(:kind)
  field(:matchVersion)
  field(:pendingParticipantId)
  field(:results, as: GoogleApi.Games.V1.Model.ParticipantResult, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Games.V1.Model.TurnBasedMatchTurn do
  def decode(value, options) do
    GoogleApi.Games.V1.Model.TurnBasedMatchTurn.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Games.V1.Model.TurnBasedMatchTurn do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Games.V1.Model.ParticipantResult do
  @moduledoc """
  This is a JSON template for a result for a match participant.

  ## Attributes

  *   `kind` (*type:* `String.t`, *default:* `games#participantResult`) - Uniquely identifies the type of this resource. Value is always the fixed string games#participantResult.
  *   `participantId` (*type:* `String.t`, *default:* `nil`) - The ID of the participant.
  *   `placing` (*type:* `integer()`, *default:* `nil`) - The placement or ranking of the participant in the match results; a number from one to the number of participants in the match. Multiple participants may have the same placing value in case of a type.
  *   `result` (*type:* `String.t`, *default:* `nil`) - The result of the participant for this match.
      Possible values are:  
      - "MATCH_RESULT_WIN" - The participant won the match. 
      - "MATCH_RESULT_LOSS" - The participant lost the match. 
      - "MATCH_RESULT_TIE" - The participant tied the match. 
      - "MATCH_RESULT_NONE" - There was no winner for the match (nobody wins or loses this kind of game.) 
      - "MATCH_RESULT_DISCONNECT" - The participant disconnected / left during the match. 
      - "MATCH_RESULT_DISAGREED" - Different clients reported different results for this participant.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :kind => String.t(),
          :participantId => String.t(),
          :placing => integer(),
          :result => String.t()
        }

  field(:kind)
  field(:participantId)
  field(:placing)
  field(:result)
end

defimpl Poison.Decoder, for: GoogleApi.Games.V1.Model.ParticipantResult do
  def decode(value, options) do
    GoogleApi.Games.V1.Model.ParticipantResult.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Games.V1.Model.ParticipantResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

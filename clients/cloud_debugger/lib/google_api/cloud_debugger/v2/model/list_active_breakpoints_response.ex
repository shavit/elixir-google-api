# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse do
  @moduledoc """
  Response for listing active breakpoints.

  ## Attributes

  *   `breakpoints` (*type:* `list(GoogleApi.CloudDebugger.V2.Model.Breakpoint.t)`, *default:* `nil`) - List of all active breakpoints.
      The fields `id` and `location` are guaranteed to be set on each breakpoint.
  *   `nextWaitToken` (*type:* `String.t`, *default:* `nil`) - A token that can be used in the next method call to block until
      the list of breakpoints changes.
  *   `waitExpired` (*type:* `boolean()`, *default:* `nil`) - If set to `true`, indicates that there is no change to the
      list of active breakpoints and the server-selected timeout has expired.
      The `breakpoints` field would be empty and should be ignored.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :breakpoints => list(GoogleApi.CloudDebugger.V2.Model.Breakpoint.t()),
          :nextWaitToken => String.t(),
          :waitExpired => boolean()
        }

  field(:breakpoints, as: GoogleApi.CloudDebugger.V2.Model.Breakpoint, type: :list)
  field(:nextWaitToken)
  field(:waitExpired)
end

defimpl Poison.Decoder, for: GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse do
  def decode(value, options) do
    GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudDebugger.V2.Model.ListActiveBreakpointsResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

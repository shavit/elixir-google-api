# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudDebugger.V2.Model.Variable do
  @moduledoc """
  Represents a variable or an argument possibly of a compound object type.
  Note how the following variables are represented:

  1) A simple variable:

      int x = 5

      { name: "x", value: "5", type: "int" }  // Captured variable

  2) A compound object:

      struct T {
          int m1;
          int m2;
      };
      T x = { 3, 7 };

      {  // Captured variable
          name: "x",
          type: "T",
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  3) A pointer where the pointee was captured:

      T x = { 3, 7 };
      T* p = &x;

      {   // Captured variable
          name: "p",
          type: "T*",
          value: "0x00500500",
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  4) A pointer where the pointee was not captured:

      T* p = new T;

      {   // Captured variable
          name: "p",
          type: "T*",
          value: "0x00400400"
          status { is_error: true, description { format: "unavailable" } }
      }

  The status should describe the reason for the missing value,
  such as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.

  Note that a null pointer should not have members.

  5) An unnamed value:

      int* p = new int(7);

      {   // Captured variable
          name: "p",
          value: "0x00500500",
          type: "int*",
          members { value: "7", type: "int" } }

  6) An unnamed pointer where the pointee was not captured:

      int* p = new int(7);
      int** pp = &p;

      {  // Captured variable
          name: "pp",
          value: "0x00500500",
          type: "int**",
          members {
              value: "0x00400400",
              type: "int*"
              status {
                  is_error: true,
                  description: { format: "unavailable" } }
              }
          }
      }

  To optimize computation, memory and network traffic, variables that
  repeat in the output multiple times can be stored once in a shared
  variable table and be referenced using the `var_table_index` field.  The
  variables stored in the shared table are nameless and are essentially
  a partition of the complete variable. To reconstruct the complete
  variable, merge the referencing variable with the referenced variable.

  When using the shared variable table, the following variables:

      T x = { 3, 7 };
      T* p = &x;
      T& r = x;

      { name: "x", var_table_index: 3, type: "T" }  // Captured variables
      { name: "p", value "0x00500500", type="T*", var_table_index: 3 }
      { name: "r", type="T&", var_table_index: 3 }

      {  // Shared variable table entry #3:
          members { name: "m1", value: "3", type: "int" },
          members { name: "m2", value: "7", type: "int" }
      }

  Note that the pointer address is stored with the referencing variable
  and not with the referenced variable. This allows the referenced variable
  to be shared between pointers and references.

  The type field is optional. The debugger agent may or may not support it.

  ## Attributes

  *   `members` (*type:* `list(GoogleApi.CloudDebugger.V2.Model.Variable.t)`, *default:* `nil`) - Members contained or pointed to by the variable.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Name of the variable, if any.
  *   `status` (*type:* `GoogleApi.CloudDebugger.V2.Model.StatusMessage.t`, *default:* `nil`) - Status associated with the variable. This field will usually stay
      unset. A status of a single variable only applies to that variable or
      expression. The rest of breakpoint data still remains valid. Variables
      might be reported in error state even when breakpoint is not in final
      state.

      The message may refer to variable name with `refers_to` set to
      `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
      In either case variable value and members will be unset.

      Example of error message applied to name: `Invalid expression syntax`.

      Example of information message applied to value: `Not captured`.

      Examples of error message applied to value:

      *   `Malformed string`,
      *   `Field f not found in class C`
      *   `Null pointer dereference`
  *   `type` (*type:* `String.t`, *default:* `nil`) - Variable type (e.g. `MyClass`). If the variable is split with
      `var_table_index`, `type` goes next to `value`. The interpretation of
      a type is agent specific. It is recommended to include the dynamic type
      rather than a static type of an object.
  *   `value` (*type:* `String.t`, *default:* `nil`) - Simple value of the variable.
  *   `varTableIndex` (*type:* `integer()`, *default:* `nil`) - Reference to a variable in the shared variable table. More than
      one variable can reference the same variable in the table. The
      `var_table_index` field is an index into `variable_table` in Breakpoint.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :members => list(GoogleApi.CloudDebugger.V2.Model.Variable.t()),
          :name => String.t(),
          :status => GoogleApi.CloudDebugger.V2.Model.StatusMessage.t(),
          :type => String.t(),
          :value => String.t(),
          :varTableIndex => integer()
        }

  field(:members, as: GoogleApi.CloudDebugger.V2.Model.Variable, type: :list)
  field(:name)
  field(:status, as: GoogleApi.CloudDebugger.V2.Model.StatusMessage)
  field(:type)
  field(:value)
  field(:varTableIndex)
end

defimpl Poison.Decoder, for: GoogleApi.CloudDebugger.V2.Model.Variable do
  def decode(value, options) do
    GoogleApi.CloudDebugger.V2.Model.Variable.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudDebugger.V2.Model.Variable do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Blogger.V3.Api.PostUserInfos do
  @moduledoc """
  API calls for all endpoints tagged `PostUserInfos`.
  """

  alias GoogleApi.Blogger.V3.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Gets one post and user info pair, by post ID and user ID. The post user info contains per-user information about the post, such as access rights, specific to the user.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Blogger.V3.Connection.t`) - Connection to server
  *   `user_id` (*type:* `String.t`) - ID of the user for the per-user information to be fetched. Either the word 'self' or the user's profile identifier.
  *   `blog_id` (*type:* `String.t`) - The ID of the blog.
  *   `post_id` (*type:* `String.t`) - The ID of the post to get.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:maxComments` (*type:* `integer()`) - Maximum number of comments to pull back on a post.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Blogger.V3.Model.PostUserInfo{}}` on success
  *   `{:error, info}` on failure
  """
  @spec blogger_post_user_infos_get(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.Blogger.V3.Model.PostUserInfo.t()} | {:error, Tesla.Env.t()}
  def blogger_post_user_infos_get(
        connection,
        user_id,
        blog_id,
        post_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :maxComments => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/users/{userId}/blogs/{blogId}/posts/{postId}", %{
        "userId" => URI.encode(user_id, &URI.char_unreserved?/1),
        "blogId" => URI.encode(blog_id, &URI.char_unreserved?/1),
        "postId" => URI.encode(post_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Blogger.V3.Model.PostUserInfo{}])
  end

  @doc """
  Retrieves a list of post and post user info pairs, possibly filtered. The post user info contains per-user information about the post, such as access rights, specific to the user.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Blogger.V3.Connection.t`) - Connection to server
  *   `user_id` (*type:* `String.t`) - ID of the user for the per-user information to be fetched. Either the word 'self' or the user's profile identifier.
  *   `blog_id` (*type:* `String.t`) - ID of the blog to fetch posts from.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:endDate` (*type:* `DateTime.t`) - Latest post date to fetch, a date-time with RFC 3339 formatting.
      *   `:fetchBodies` (*type:* `boolean()`) - Whether the body content of posts is included. Default is false.
      *   `:labels` (*type:* `String.t`) - Comma-separated list of labels to search for.
      *   `:maxResults` (*type:* `integer()`) - Maximum number of posts to fetch.
      *   `:orderBy` (*type:* `String.t`) - Sort order applied to search results. Default is published.
      *   `:pageToken` (*type:* `String.t`) - Continuation token if the request is paged.
      *   `:startDate` (*type:* `DateTime.t`) - Earliest post date to fetch, a date-time with RFC 3339 formatting.
      *   `:status` (*type:* `list(String.t)`) - 
      *   `:view` (*type:* `String.t`) - Access level with which to view the returned result. Note that some fields require elevated access.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Blogger.V3.Model.PostUserInfosList{}}` on success
  *   `{:error, info}` on failure
  """
  @spec blogger_post_user_infos_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, GoogleApi.Blogger.V3.Model.PostUserInfosList.t()} | {:error, Tesla.Env.t()}
  def blogger_post_user_infos_list(
        connection,
        user_id,
        blog_id,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :endDate => :query,
      :fetchBodies => :query,
      :labels => :query,
      :maxResults => :query,
      :orderBy => :query,
      :pageToken => :query,
      :startDate => :query,
      :status => :query,
      :view => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/users/{userId}/blogs/{blogId}/posts", %{
        "userId" => URI.encode(user_id, &URI.char_unreserved?/1),
        "blogId" => URI.encode(blog_id, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Blogger.V3.Model.PostUserInfosList{}])
  end
end

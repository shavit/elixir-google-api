# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudTrace.V2.Model.TruncatableString do
  @moduledoc """
  Represents a string that might be shortened to a specified length.

  ## Attributes

  *   `truncatedByteCount` (*type:* `integer()`, *default:* `nil`) - The number of bytes removed from the original string. If this
      value is 0, then the string was not shortened.
  *   `value` (*type:* `String.t`, *default:* `nil`) - The shortened string. For example, if the original string is 500
      bytes long and the limit of the string is 128 bytes, then
      `value` contains the first 128 bytes of the 500-byte string.

      Truncation always happens on a UTF8 character boundary. If there
      are multi-byte characters in the string, then the length of the
      shortened string might be less than the size limit.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :truncatedByteCount => integer(),
          :value => String.t()
        }

  field(:truncatedByteCount)
  field(:value)
end

defimpl Poison.Decoder, for: GoogleApi.CloudTrace.V2.Model.TruncatableString do
  def decode(value, options) do
    GoogleApi.CloudTrace.V2.Model.TruncatableString.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudTrace.V2.Model.TruncatableString do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeVersion do
  @moduledoc """
  Version of a StoredInfoType, including the configuration used to build it,
  create timestamp, and current state.

  ## Attributes

  *   `config` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeConfig.t`, *default:* `nil`) - StoredInfoType configuration.
  *   `createTime` (*type:* `DateTime.t`, *default:* `nil`) - Create timestamp of the version. Read-only, determined by the system
      when the version is created.
  *   `errors` (*type:* `list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Error.t)`, *default:* `nil`) - Errors that occurred when creating this storedInfoType version, or
      anomalies detected in the storedInfoType data that render it unusable. Only
      the five most recent errors will be displayed, with the most recent error
      appearing first.
      <p>For example, some of the data for stored custom dictionaries is put in
      the user's Google Cloud Storage bucket, and if this data is modified or
      deleted by the user or another system, the dictionary becomes invalid.
      <p>If any errors occur, fix the problem indicated by the error message and
      use the UpdateStoredInfoType API method to create another version of the
      storedInfoType to continue using it, reusing the same `config` if it was
      not the source of the error.
  *   `state` (*type:* `String.t`, *default:* `nil`) - Stored info type version state. Read-only, updated by the system
      during dictionary creation.
  *   `stats` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeStats.t`, *default:* `nil`) - Statistics about this storedInfoType version.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :config => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeConfig.t(),
          :createTime => DateTime.t(),
          :errors => list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Error.t()),
          :state => String.t(),
          :stats => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeStats.t()
        }

  field(:config, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeConfig)
  field(:createTime, as: DateTime)
  field(:errors, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Error, type: :list)
  field(:state)
  field(:stats, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeStats)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeVersion do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeVersion.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2StoredInfoTypeVersion do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

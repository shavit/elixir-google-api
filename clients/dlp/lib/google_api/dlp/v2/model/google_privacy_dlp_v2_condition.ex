# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Condition do
  @moduledoc """
  The field type of `value` and `field` do not need to match to be
  considered equal, but not all comparisons are possible.
  EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types,
  but all other comparisons are invalid with incompatible types.
  A `value` of type:

  - `string` can be compared against all other types
  - `boolean` can only be compared against other booleans
  - `integer` can be compared against doubles or a string if the string value
  can be parsed as an integer.
  - `double` can be compared against integers or a string if the string can
  be parsed as a double.
  - `Timestamp` can be compared against strings in RFC 3339 date string
  format.
  - `TimeOfDay` can be compared against timestamps and strings in the format
  of 'HH:mm:ss'.

  If we fail to compare do to type mismatch, a warning will be given and
  the condition will evaluate to false.

  ## Attributes

  *   `field` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId.t`, *default:* `nil`) - Field within the record this condition is evaluated against. [required]
  *   `operator` (*type:* `String.t`, *default:* `nil`) - Operator used to compare the field or infoType to the value. [required]
  *   `value` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Value.t`, *default:* `nil`) - Value to compare against. [Required, except for `EXISTS` tests.]
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :field => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId.t(),
          :operator => String.t(),
          :value => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Value.t()
        }

  field(:field, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId)
  field(:operator)
  field(:value, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Value)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Condition do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Condition.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Condition do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

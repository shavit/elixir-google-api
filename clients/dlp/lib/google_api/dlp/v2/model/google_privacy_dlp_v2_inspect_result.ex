# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectResult do
  @moduledoc """
  All the findings for a single scanned item.

  ## Attributes

  *   `findings` (*type:* `list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding.t)`, *default:* `nil`) - List of findings for an item.
  *   `findingsTruncated` (*type:* `boolean()`, *default:* `nil`) - If true, then this item might have more findings than were returned,
      and the findings returned are an arbitrary subset of all findings.
      The findings list might be truncated because the input items were too
      large, or because the server reached the maximum amount of resources
      allowed for a single API call. For best results, divide the input into
      smaller batches.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :findings => list(GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding.t()),
          :findingsTruncated => boolean()
        }

  field(:findings, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2Finding, type: :list)
  field(:findingsTruncated)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectResult do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectResult.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectResult do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

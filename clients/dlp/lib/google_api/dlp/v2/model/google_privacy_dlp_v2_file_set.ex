# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FileSet do
  @moduledoc """
  Set of files to scan.

  ## Attributes

  *   `regexFileSet` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2CloudStorageRegexFileSet.t`, *default:* `nil`) - The regex-filtered set of files to scan. Exactly one of `url` or
      `regex_file_set` must be set.
  *   `url` (*type:* `String.t`, *default:* `nil`) - The Cloud Storage url of the file(s) to scan, in the format
      `gs://<bucket>/<path>`. Trailing wildcard in the path is allowed.

      If the url ends in a trailing slash, the bucket or directory represented
      by the url will be scanned non-recursively (content in sub-directories
      will not be scanned). This means that `gs://mybucket/` is equivalent to
      `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to
      `gs://mybucket/directory/*`.

      Exactly one of `url` or `regex_file_set` must be set.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :regexFileSet => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2CloudStorageRegexFileSet.t(),
          :url => String.t()
        }

  field(:regexFileSet, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2CloudStorageRegexFileSet)
  field(:url)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FileSet do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FileSet.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FileSet do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

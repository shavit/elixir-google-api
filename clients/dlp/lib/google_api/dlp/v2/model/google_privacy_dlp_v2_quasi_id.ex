# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuasiId do
  @moduledoc """
  A column with a semantic tag attached.

  ## Attributes

  *   `customTag` (*type:* `String.t`, *default:* `nil`) - A column can be tagged with a custom tag. In this case, the user must
      indicate an auxiliary table that contains statistical information on
      the possible values of this column (below).
  *   `field` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId.t`, *default:* `nil`) - Identifies the column. [required]
  *   `inferred` (*type:* `GoogleApi.DLP.V2.Model.GoogleProtobufEmpty.t`, *default:* `nil`) - If no semantic tag is indicated, we infer the statistical model from
      the distribution of values in the input data
  *   `infoType` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t`, *default:* `nil`) - A column can be tagged with a InfoType to use the relevant public
      dataset as a statistical model of population, if available. We
      currently support US ZIP codes, region codes, ages and genders.
      To programmatically obtain the list of supported InfoTypes, use
      ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :customTag => String.t(),
          :field => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId.t(),
          :inferred => GoogleApi.DLP.V2.Model.GoogleProtobufEmpty.t(),
          :infoType => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType.t()
        }

  field(:customTag)
  field(:field, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2FieldId)
  field(:inferred, as: GoogleApi.DLP.V2.Model.GoogleProtobufEmpty)
  field(:infoType, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InfoType)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuasiId do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuasiId.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2QuasiId do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ReidentifyContentRequest do
  @moduledoc """
  Request to re-identify an item.

  ## Attributes

  *   `inspectConfig` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectConfig.t`, *default:* `nil`) - Configuration for the inspector.
  *   `inspectTemplateName` (*type:* `String.t`, *default:* `nil`) - Optional template to use. Any configuration directly specified in
      `inspect_config` will override those set in the template. Singular fields
      that are set in this request will replace their corresponding fields in the
      template. Repeated fields are appended. Singular sub-messages and groups
      are recursively merged.
  *   `item` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ContentItem.t`, *default:* `nil`) - The item to re-identify. Will be treated as text.
  *   `location` (*type:* `String.t`, *default:* `nil`) - The geographic location to process content reidentification.  Reserved for
      future extensions.
  *   `reidentifyConfig` (*type:* `GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DeidentifyConfig.t`, *default:* `nil`) - Configuration for the re-identification of the content item.
      This field shares the same proto message type that is used for
      de-identification, however its usage here is for the reversal of the
      previous de-identification. Re-identification is performed by examining
      the transformations used to de-identify the items and executing the
      reverse. This requires that only reversible transformations
      be provided here. The reversible transformations are:

       - `CryptoReplaceFfxFpeConfig`
  *   `reidentifyTemplateName` (*type:* `String.t`, *default:* `nil`) - Optional template to use. References an instance of `DeidentifyTemplate`.
      Any configuration directly specified in `reidentify_config` or
      `inspect_config` will override those set in the template. Singular fields
      that are set in this request will replace their corresponding fields in the
      template. Repeated fields are appended. Singular sub-messages and groups
      are recursively merged.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :inspectConfig => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectConfig.t(),
          :inspectTemplateName => String.t(),
          :item => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ContentItem.t(),
          :location => String.t(),
          :reidentifyConfig => GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DeidentifyConfig.t(),
          :reidentifyTemplateName => String.t()
        }

  field(:inspectConfig, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2InspectConfig)
  field(:inspectTemplateName)
  field(:item, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ContentItem)
  field(:location)
  field(:reidentifyConfig, as: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2DeidentifyConfig)
  field(:reidentifyTemplateName)
end

defimpl Poison.Decoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ReidentifyContentRequest do
  def decode(value, options) do
    GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ReidentifyContentRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DLP.V2.Model.GooglePrivacyDlpV2ReidentifyContentRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

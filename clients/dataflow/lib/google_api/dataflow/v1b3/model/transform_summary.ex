# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.TransformSummary do
  @moduledoc """
  Description of the type, names/ids, and input/outputs for a transform.

  ## Attributes

  *   `displayData` (*type:* `list(GoogleApi.Dataflow.V1b3.Model.DisplayData.t)`, *default:* `nil`) - Transform-specific display data.
  *   `id` (*type:* `String.t`, *default:* `nil`) - SDK generated id of this transform instance.
  *   `inputCollectionName` (*type:* `list(String.t)`, *default:* `nil`) - User names for all collection inputs to this transform.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - Type of transform.
  *   `name` (*type:* `String.t`, *default:* `nil`) - User provided name for this transform instance.
  *   `outputCollectionName` (*type:* `list(String.t)`, *default:* `nil`) - User  names for all collection outputs to this transform.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :displayData => list(GoogleApi.Dataflow.V1b3.Model.DisplayData.t()),
          :id => String.t(),
          :inputCollectionName => list(String.t()),
          :kind => String.t(),
          :name => String.t(),
          :outputCollectionName => list(String.t())
        }

  field(:displayData, as: GoogleApi.Dataflow.V1b3.Model.DisplayData, type: :list)
  field(:id)
  field(:inputCollectionName, type: :list)
  field(:kind)
  field(:name)
  field(:outputCollectionName, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.TransformSummary do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.TransformSummary.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.TransformSummary do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.ReportedParallelism do
  @moduledoc """
  Represents the level of parallelism in a WorkItem's input,
  reported by the worker.

  ## Attributes

  *   `isInfinite` (*type:* `boolean()`, *default:* `nil`) - Specifies whether the parallelism is infinite. If true, "value" is
      ignored.
      Infinite parallelism means the service will assume that the work item
      can always be split into more non-empty work items by dynamic splitting.
      This is a work-around for lack of support for infinity by the current
      JSON-based Java RPC stack.
  *   `value` (*type:* `float()`, *default:* `nil`) - Specifies the level of parallelism in case it is finite.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :isInfinite => boolean(),
          :value => float()
        }

  field(:isInfinite)
  field(:value)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.ReportedParallelism do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.ReportedParallelism.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.ReportedParallelism do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

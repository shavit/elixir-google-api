# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.WorkerPool do
  @moduledoc """
  Describes one particular pool of Cloud Dataflow workers to be
  instantiated by the Cloud Dataflow service in order to perform the
  computations required by a job.  Note that a workflow job may use
  multiple pools, in order to match the various computational
  requirements of the various stages of the job.

  ## Attributes

  *   `autoscalingSettings` (*type:* `GoogleApi.Dataflow.V1b3.Model.AutoscalingSettings.t`, *default:* `nil`) - Settings for autoscaling of this WorkerPool.
  *   `dataDisks` (*type:* `list(GoogleApi.Dataflow.V1b3.Model.Disk.t)`, *default:* `nil`) - Data disks that are used by a VM in this workflow.
  *   `defaultPackageSet` (*type:* `String.t`, *default:* `nil`) - The default package set to install.  This allows the service to
      select a default set of packages which are useful to worker
      harnesses written in a particular language.
  *   `diskSizeGb` (*type:* `integer()`, *default:* `nil`) - Size of root disk for VMs, in GB.  If zero or unspecified, the service will
      attempt to choose a reasonable default.
  *   `diskSourceImage` (*type:* `String.t`, *default:* `nil`) - Fully qualified source image for disks.
  *   `diskType` (*type:* `String.t`, *default:* `nil`) - Type of root disk for VMs.  If empty or unspecified, the service will
      attempt to choose a reasonable default.
  *   `ipConfiguration` (*type:* `String.t`, *default:* `nil`) - Configuration for VM IPs.
  *   `kind` (*type:* `String.t`, *default:* `nil`) - The kind of the worker pool; currently only `harness` and `shuffle`
      are supported.
  *   `machineType` (*type:* `String.t`, *default:* `nil`) - Machine type (e.g. "n1-standard-1").  If empty or unspecified, the
      service will attempt to choose a reasonable default.
  *   `metadata` (*type:* `map()`, *default:* `nil`) - Metadata to set on the Google Compute Engine VMs.
  *   `network` (*type:* `String.t`, *default:* `nil`) - Network to which VMs will be assigned.  If empty or unspecified,
      the service will use the network "default".
  *   `numThreadsPerWorker` (*type:* `integer()`, *default:* `nil`) - The number of threads per worker harness. If empty or unspecified, the
      service will choose a number of threads (according to the number of cores
      on the selected machine type for batch, or 1 by convention for streaming).
  *   `numWorkers` (*type:* `integer()`, *default:* `nil`) - Number of Google Compute Engine workers in this pool needed to
      execute the job.  If zero or unspecified, the service will
      attempt to choose a reasonable default.
  *   `onHostMaintenance` (*type:* `String.t`, *default:* `nil`) - The action to take on host maintenance, as defined by the Google
      Compute Engine API.
  *   `packages` (*type:* `list(GoogleApi.Dataflow.V1b3.Model.Package.t)`, *default:* `nil`) - Packages to be installed on workers.
  *   `poolArgs` (*type:* `map()`, *default:* `nil`) - Extra arguments for this worker pool.
  *   `subnetwork` (*type:* `String.t`, *default:* `nil`) - Subnetwork to which VMs will be assigned, if desired.  Expected to be of
      the form "regions/REGION/subnetworks/SUBNETWORK".
  *   `taskrunnerSettings` (*type:* `GoogleApi.Dataflow.V1b3.Model.TaskRunnerSettings.t`, *default:* `nil`) - Settings passed through to Google Compute Engine workers when
      using the standard Dataflow task runner.  Users should ignore
      this field.
  *   `teardownPolicy` (*type:* `String.t`, *default:* `nil`) - Sets the policy for determining when to turndown worker pool.
      Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and
      `TEARDOWN_NEVER`.
      `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether
      the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down
      if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn
      down.

      If the workers are not torn down by the service, they will
      continue to run and use Google Compute Engine VM resources in the
      user's project until they are explicitly terminated by the user.
      Because of this, Google recommends using the `TEARDOWN_ALWAYS`
      policy except for small, manually supervised test jobs.

      If unknown or unspecified, the service will attempt to choose a reasonable
      default.
  *   `workerHarnessContainerImage` (*type:* `String.t`, *default:* `nil`) - Required. Docker container image that executes the Cloud Dataflow worker
      harness, residing in Google Container Registry.
  *   `zone` (*type:* `String.t`, *default:* `nil`) - Zone to run the worker pools in.  If empty or unspecified, the service
      will attempt to choose a reasonable default.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :autoscalingSettings => GoogleApi.Dataflow.V1b3.Model.AutoscalingSettings.t(),
          :dataDisks => list(GoogleApi.Dataflow.V1b3.Model.Disk.t()),
          :defaultPackageSet => String.t(),
          :diskSizeGb => integer(),
          :diskSourceImage => String.t(),
          :diskType => String.t(),
          :ipConfiguration => String.t(),
          :kind => String.t(),
          :machineType => String.t(),
          :metadata => map(),
          :network => String.t(),
          :numThreadsPerWorker => integer(),
          :numWorkers => integer(),
          :onHostMaintenance => String.t(),
          :packages => list(GoogleApi.Dataflow.V1b3.Model.Package.t()),
          :poolArgs => map(),
          :subnetwork => String.t(),
          :taskrunnerSettings => GoogleApi.Dataflow.V1b3.Model.TaskRunnerSettings.t(),
          :teardownPolicy => String.t(),
          :workerHarnessContainerImage => String.t(),
          :zone => String.t()
        }

  field(:autoscalingSettings, as: GoogleApi.Dataflow.V1b3.Model.AutoscalingSettings)
  field(:dataDisks, as: GoogleApi.Dataflow.V1b3.Model.Disk, type: :list)
  field(:defaultPackageSet)
  field(:diskSizeGb)
  field(:diskSourceImage)
  field(:diskType)
  field(:ipConfiguration)
  field(:kind)
  field(:machineType)
  field(:metadata, type: :map)
  field(:network)
  field(:numThreadsPerWorker)
  field(:numWorkers)
  field(:onHostMaintenance)
  field(:packages, as: GoogleApi.Dataflow.V1b3.Model.Package, type: :list)
  field(:poolArgs, type: :map)
  field(:subnetwork)
  field(:taskrunnerSettings, as: GoogleApi.Dataflow.V1b3.Model.TaskRunnerSettings)
  field(:teardownPolicy)
  field(:workerHarnessContainerImage)
  field(:zone)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.WorkerPool do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.WorkerPool.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.WorkerPool do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

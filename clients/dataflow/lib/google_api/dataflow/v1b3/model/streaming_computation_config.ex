# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Dataflow.V1b3.Model.StreamingComputationConfig do
  @moduledoc """
  Configuration information for a single streaming computation.

  ## Attributes

  *   `computationId` (*type:* `String.t`, *default:* `nil`) - Unique identifier for this computation.
  *   `instructions` (*type:* `list(GoogleApi.Dataflow.V1b3.Model.ParallelInstruction.t)`, *default:* `nil`) - Instructions that comprise the computation.
  *   `stageName` (*type:* `String.t`, *default:* `nil`) - Stage name of this computation.
  *   `systemName` (*type:* `String.t`, *default:* `nil`) - System defined name for this computation.
  *   `transformUserNameToStateFamily` (*type:* `map()`, *default:* `nil`) - Map from user name of stateful transforms in this stage to their state
      family.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :computationId => String.t(),
          :instructions => list(GoogleApi.Dataflow.V1b3.Model.ParallelInstruction.t()),
          :stageName => String.t(),
          :systemName => String.t(),
          :transformUserNameToStateFamily => map()
        }

  field(:computationId)
  field(:instructions, as: GoogleApi.Dataflow.V1b3.Model.ParallelInstruction, type: :list)
  field(:stageName)
  field(:systemName)
  field(:transformUserNameToStateFamily, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Dataflow.V1b3.Model.StreamingComputationConfig do
  def decode(value, options) do
    GoogleApi.Dataflow.V1b3.Model.StreamingComputationConfig.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Dataflow.V1b3.Model.StreamingComputationConfig do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

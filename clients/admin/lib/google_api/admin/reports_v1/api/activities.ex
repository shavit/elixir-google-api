# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Admin.Reports_v1.Api.Activities do
  @moduledoc """
  API calls for all endpoints tagged `Activities`.
  """

  alias GoogleApi.Admin.Reports_v1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Retrieves a list of activities for a specific customer and application.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Admin.Reports_v1.Connection.t`) - Connection to server
  *   `user_key` (*type:* `String.t`) - Represents the profile id or the user email for which the data should be filtered. When 'all' is specified as the userKey, it returns usageReports for all users.
  *   `application_name` (*type:* `String.t`) - Application name for which the events are to be retrieved.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:actorIpAddress` (*type:* `String.t`) - IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
      *   `:customerId` (*type:* `String.t`) - Represents the customer for which the data is to be fetched.
      *   `:endTime` (*type:* `String.t`) - Return events which occurred at or before this time.
      *   `:eventName` (*type:* `String.t`) - Name of the event being queried.
      *   `:filters` (*type:* `String.t`) - Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2 name][operator][parameter2 value],...
      *   `:maxResults` (*type:* `integer()`) - Number of activity records to be shown in each page.
      *   `:orgUnitID` (*type:* `String.t`) - the organizational unit's(OU) ID to filter activities from users belonging to a specific OU or one of its sub-OU(s)
      *   `:pageToken` (*type:* `String.t`) - Token to specify next page.
      *   `:startTime` (*type:* `String.t`) - Return events which occurred at or after this time.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Admin.Reports_v1.Model.Activities{}}` on success
  *   `{:error, info}` on failure
  """
  @spec reports_activities_list(Tesla.Env.client(), String.t(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Admin.Reports_v1.Model.Activities.t()} | {:error, Tesla.Env.t()}
  def reports_activities_list(
        connection,
        user_key,
        application_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :actorIpAddress => :query,
      :customerId => :query,
      :endTime => :query,
      :eventName => :query,
      :filters => :query,
      :maxResults => :query,
      :orgUnitID => :query,
      :pageToken => :query,
      :startTime => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/activity/users/{userKey}/applications/{applicationName}", %{
        "userKey" => URI.encode(user_key, &URI.char_unreserved?/1),
        "applicationName" => URI.encode(application_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Admin.Reports_v1.Model.Activities{}])
  end

  @doc """
  Push changes to activities

  ## Parameters

  *   `connection` (*type:* `GoogleApi.Admin.Reports_v1.Connection.t`) - Connection to server
  *   `user_key` (*type:* `String.t`) - Represents the profile id or the user email for which the data should be filtered. When 'all' is specified as the userKey, it returns usageReports for all users.
  *   `application_name` (*type:* `String.t`) - Application name for which the events are to be retrieved.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:actorIpAddress` (*type:* `String.t`) - IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
      *   `:customerId` (*type:* `String.t`) - Represents the customer for which the data is to be fetched.
      *   `:endTime` (*type:* `String.t`) - Return events which occurred at or before this time.
      *   `:eventName` (*type:* `String.t`) - Name of the event being queried.
      *   `:filters` (*type:* `String.t`) - Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2 name][operator][parameter2 value],...
      *   `:maxResults` (*type:* `integer()`) - Number of activity records to be shown in each page.
      *   `:orgUnitID` (*type:* `String.t`) - the organizational unit's(OU) ID to filter activities from users belonging to a specific OU or one of its sub-OU(s)
      *   `:pageToken` (*type:* `String.t`) - Token to specify next page.
      *   `:startTime` (*type:* `String.t`) - Return events which occurred at or after this time.
      *   `:resource` (*type:* `GoogleApi.Admin.Reports_v1.Model.Channel.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.Admin.Reports_v1.Model.Channel{}}` on success
  *   `{:error, info}` on failure
  """
  @spec reports_activities_watch(Tesla.Env.client(), String.t(), String.t(), keyword(), keyword()) ::
          {:ok, GoogleApi.Admin.Reports_v1.Model.Channel.t()} | {:error, Tesla.Env.t()}
  def reports_activities_watch(
        connection,
        user_key,
        application_name,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :actorIpAddress => :query,
      :customerId => :query,
      :endTime => :query,
      :eventName => :query,
      :filters => :query,
      :maxResults => :query,
      :orgUnitID => :query,
      :pageToken => :query,
      :startTime => :query,
      :resource => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/activity/users/{userKey}/applications/{applicationName}/watch", %{
        "userKey" => URI.encode(user_key, &URI.char_unreserved?/1),
        "applicationName" => URI.encode(application_name, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.Admin.Reports_v1.Model.Channel{}])
  end
end

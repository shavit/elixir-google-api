# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Slides.V1.Model.SolidFill do
  @moduledoc """
  A solid color fill. The page or page element is filled entirely with the
  specified color value.

  If any field is unset, its value may be inherited from a parent placeholder
  if it exists.

  ## Attributes

  *   `alpha` (*type:* `number()`, *default:* `nil`) - The fraction of this `color` that should be applied to the pixel.
      That is, the final pixel color is defined by the equation:

        pixel color = alpha * (color) + (1.0 - alpha) * (background color)

      This means that a value of 1.0 corresponds to a solid color, whereas
      a value of 0.0 corresponds to a completely transparent color.
  *   `color` (*type:* `GoogleApi.Slides.V1.Model.OpaqueColor.t`, *default:* `nil`) - The color value of the solid fill.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :alpha => number(),
          :color => GoogleApi.Slides.V1.Model.OpaqueColor.t()
        }

  field(:alpha)
  field(:color, as: GoogleApi.Slides.V1.Model.OpaqueColor)
end

defimpl Poison.Decoder, for: GoogleApi.Slides.V1.Model.SolidFill do
  def decode(value, options) do
    GoogleApi.Slides.V1.Model.SolidFill.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Slides.V1.Model.SolidFill do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

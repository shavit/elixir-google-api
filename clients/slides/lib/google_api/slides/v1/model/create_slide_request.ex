# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Slides.V1.Model.CreateSlideRequest do
  @moduledoc """
  Creates a new slide.

  ## Attributes

  *   `insertionIndex` (*type:* `integer()`, *default:* `nil`) - The optional zero-based index indicating where to insert the slides.

      If you don't specify an index, the new slide is created at the end.
  *   `objectId` (*type:* `String.t`, *default:* `nil`) - A user-supplied object ID.

      If you specify an ID, it must be unique among all pages and page elements
      in the presentation. The ID must start with an alphanumeric character or an
      underscore (matches regex `[a-zA-Z0-9_]`); remaining characters
      may include those as well as a hyphen or colon (matches regex
      `[a-zA-Z0-9_-:]`).
      The length of the ID must not be less than 5 or greater than 50.

      If you don't specify an ID, a unique one is generated.
  *   `placeholderIdMappings` (*type:* `list(GoogleApi.Slides.V1.Model.LayoutPlaceholderIdMapping.t)`, *default:* `nil`) - An optional list of object ID mappings from the placeholder(s) on the layout to the placeholder(s)
      that will be created on the new slide from that specified layout. Can only
      be used when `slide_layout_reference` is specified.
  *   `slideLayoutReference` (*type:* `GoogleApi.Slides.V1.Model.LayoutReference.t`, *default:* `nil`) - Layout reference of the slide to be inserted, based on the *current
      master*, which is one of the following:

      - The master of the previous slide index.
      - The master of the first slide, if the insertion_index is zero.
      - The first master in the presentation, if there are no slides.

      If the LayoutReference is not found in the current master, a 400 bad
      request error is returned.

      If you don't specify a layout reference, then the new slide will use the
      predefined layout `BLANK`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :insertionIndex => integer(),
          :objectId => String.t(),
          :placeholderIdMappings =>
            list(GoogleApi.Slides.V1.Model.LayoutPlaceholderIdMapping.t()),
          :slideLayoutReference => GoogleApi.Slides.V1.Model.LayoutReference.t()
        }

  field(:insertionIndex)
  field(:objectId)

  field(
    :placeholderIdMappings,
    as: GoogleApi.Slides.V1.Model.LayoutPlaceholderIdMapping,
    type: :list
  )

  field(:slideLayoutReference, as: GoogleApi.Slides.V1.Model.LayoutReference)
end

defimpl Poison.Decoder, for: GoogleApi.Slides.V1.Model.CreateSlideRequest do
  def decode(value, options) do
    GoogleApi.Slides.V1.Model.CreateSlideRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Slides.V1.Model.CreateSlideRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

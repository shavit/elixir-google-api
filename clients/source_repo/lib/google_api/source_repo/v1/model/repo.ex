# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.SourceRepo.V1.Model.Repo do
  @moduledoc """
  A repository (or repo) is a Git repository storing versioned source content.

  ## Attributes

  *   `mirrorConfig` (*type:* `GoogleApi.SourceRepo.V1.Model.MirrorConfig.t`, *default:* `nil`) - How this repository mirrors a repository managed by another service.
      Read-only field.
  *   `name` (*type:* `String.t`, *default:* `nil`) - Resource name of the repository, of the form
      `projects/<project>/repos/<repo>`.  The repo name may contain slashes.
      eg, `projects/myproject/repos/name/with/slash`
  *   `pubsubConfigs` (*type:* `%{optional(String.t) => GoogleApi.SourceRepo.V1.Model.PubsubConfig.t}`, *default:* `nil`) - How this repository publishes a change in the repository through Cloud
      Pub/Sub. Keyed by the topic names.
  *   `size` (*type:* `String.t`, *default:* `nil`) - The disk usage of the repo, in bytes. Read-only field. Size is only
      returned by GetRepo.
  *   `url` (*type:* `String.t`, *default:* `nil`) - URL to clone the repository from Google Cloud Source Repositories.
      Read-only field.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :mirrorConfig => GoogleApi.SourceRepo.V1.Model.MirrorConfig.t(),
          :name => String.t(),
          :pubsubConfigs => %{
            optional(String.t()) => GoogleApi.SourceRepo.V1.Model.PubsubConfig.t()
          },
          :size => String.t(),
          :url => String.t()
        }

  field(:mirrorConfig, as: GoogleApi.SourceRepo.V1.Model.MirrorConfig)
  field(:name)
  field(:pubsubConfigs, as: GoogleApi.SourceRepo.V1.Model.PubsubConfig, type: :map)
  field(:size)
  field(:url)
end

defimpl Poison.Decoder, for: GoogleApi.SourceRepo.V1.Model.Repo do
  def decode(value, options) do
    GoogleApi.SourceRepo.V1.Model.Repo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.SourceRepo.V1.Model.Repo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

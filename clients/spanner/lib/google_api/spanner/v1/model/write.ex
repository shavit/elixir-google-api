# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Spanner.V1.Model.Write do
  @moduledoc """
  Arguments to insert, update, insert_or_update, and
  replace operations.

  ## Attributes

  *   `columns` (*type:* `list(String.t)`, *default:* `nil`) - The names of the columns in table to be written.

      The list of columns must contain enough columns to allow
      Cloud Spanner to derive values for all primary key columns in the
      row(s) to be modified.
  *   `table` (*type:* `String.t`, *default:* `nil`) - Required. The table whose rows will be written.
  *   `values` (*type:* `list(list(any()))`, *default:* `nil`) - The values to be written. `values` can contain more than one
      list of values. If it does, then multiple rows are written, one
      for each entry in `values`. Each list in `values` must have
      exactly as many entries as there are entries in columns
      above. Sending multiple lists is equivalent to sending multiple
      `Mutation`s, each containing one `values` entry and repeating
      table and columns. Individual values in each list are
      encoded as described here.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :columns => list(String.t()),
          :table => String.t(),
          :values => list(list(any()))
        }

  field(:columns, type: :list)
  field(:table)
  field(:values, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.Spanner.V1.Model.Write do
  def decode(value, options) do
    GoogleApi.Spanner.V1.Model.Write.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Spanner.V1.Model.Write do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

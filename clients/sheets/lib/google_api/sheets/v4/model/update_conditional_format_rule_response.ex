# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Sheets.V4.Model.UpdateConditionalFormatRuleResponse do
  @moduledoc """
  The result of updating a conditional format rule.

  ## Attributes

  *   `newIndex` (*type:* `integer()`, *default:* `nil`) - The index of the new rule.
  *   `newRule` (*type:* `GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t`, *default:* `nil`) - The new rule that replaced the old rule (if replacing),
      or the rule that was moved (if moved)
  *   `oldIndex` (*type:* `integer()`, *default:* `nil`) - The old index of the rule. Not set if a rule was replaced
      (because it is the same as new_index).
  *   `oldRule` (*type:* `GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t`, *default:* `nil`) - The old (deleted) rule. Not set if a rule was moved
      (because it is the same as new_rule).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :newIndex => integer(),
          :newRule => GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t(),
          :oldIndex => integer(),
          :oldRule => GoogleApi.Sheets.V4.Model.ConditionalFormatRule.t()
        }

  field(:newIndex)
  field(:newRule, as: GoogleApi.Sheets.V4.Model.ConditionalFormatRule)
  field(:oldIndex)
  field(:oldRule, as: GoogleApi.Sheets.V4.Model.ConditionalFormatRule)
end

defimpl Poison.Decoder, for: GoogleApi.Sheets.V4.Model.UpdateConditionalFormatRuleResponse do
  def decode(value, options) do
    GoogleApi.Sheets.V4.Model.UpdateConditionalFormatRuleResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Sheets.V4.Model.UpdateConditionalFormatRuleResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

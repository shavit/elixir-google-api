# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Monitoring.V3.Model.Point do
  @moduledoc """
  A single data point in a time series.

  ## Attributes

  *   `interval` (*type:* `GoogleApi.Monitoring.V3.Model.TimeInterval.t`, *default:* `nil`) - The time interval to which the data point applies. For GAUGE metrics, only the end time of the interval is used. For DELTA metrics, the start and end time should specify a non-zero interval, with subsequent points specifying contiguous and non-overlapping intervals. For CUMULATIVE metrics, the start and end time should specify a non-zero interval, with subsequent points specifying the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points.
  *   `value` (*type:* `GoogleApi.Monitoring.V3.Model.TypedValue.t`, *default:* `nil`) - The value of the data point.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :interval => GoogleApi.Monitoring.V3.Model.TimeInterval.t(),
          :value => GoogleApi.Monitoring.V3.Model.TypedValue.t()
        }

  field(:interval, as: GoogleApi.Monitoring.V3.Model.TimeInterval)
  field(:value, as: GoogleApi.Monitoring.V3.Model.TypedValue)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.Point do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.Point.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.Point do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia do
  @moduledoc """
  gdata

  ## Attributes

  *   `blobRef` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `blobstore2Info` (*type:* `GoogleApi.YouTubeReporting.V1.Model.GdataBlobstore2Info.t`, *default:* `nil`) - gdata
  *   `cosmoBinaryReference` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `crc32cHash` (*type:* `integer()`, *default:* `nil`) - gdata
  *   `inline` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `length` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `md5Hash` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `objectId` (*type:* `GoogleApi.YouTubeReporting.V1.Model.GdataObjectId.t`, *default:* `nil`) - gdata
  *   `path` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `referenceType` (*type:* `String.t`, *default:* `nil`) - gdata
  *   `sha1Hash` (*type:* `String.t`, *default:* `nil`) - gdata
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :blobRef => String.t(),
          :blobstore2Info => GoogleApi.YouTubeReporting.V1.Model.GdataBlobstore2Info.t(),
          :cosmoBinaryReference => String.t(),
          :crc32cHash => integer(),
          :inline => String.t(),
          :length => String.t(),
          :md5Hash => String.t(),
          :objectId => GoogleApi.YouTubeReporting.V1.Model.GdataObjectId.t(),
          :path => String.t(),
          :referenceType => String.t(),
          :sha1Hash => String.t()
        }

  field(:blobRef)
  field(:blobstore2Info, as: GoogleApi.YouTubeReporting.V1.Model.GdataBlobstore2Info)
  field(:cosmoBinaryReference)
  field(:crc32cHash)
  field(:inline)
  field(:length)
  field(:md5Hash)
  field(:objectId, as: GoogleApi.YouTubeReporting.V1.Model.GdataObjectId)
  field(:path)
  field(:referenceType)
  field(:sha1Hash)
end

defimpl Poison.Decoder, for: GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia do
  def decode(value, options) do
    GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.YouTubeReporting.V1.Model.GdataCompositeMedia do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Container.V1.Model.UsableSubnetwork do
  @moduledoc """
  UsableSubnetwork resource returns the subnetwork name, its associated network
  and the primary CIDR range.

  ## Attributes

  *   `ipCidrRange` (*type:* `String.t`, *default:* `nil`) - The range of internal addresses that are owned by this subnetwork.
  *   `network` (*type:* `String.t`, *default:* `nil`) - Network Name.
      Example: projects/my-project/global/networks/my-network
  *   `secondaryIpRanges` (*type:* `list(GoogleApi.Container.V1.Model.UsableSubnetworkSecondaryRange.t)`, *default:* `nil`) - Secondary IP ranges.
  *   `statusMessage` (*type:* `String.t`, *default:* `nil`) - A human readable status message representing the reasons for cases where
      the caller cannot use the secondary ranges under the subnet. For example if
      the secondary_ip_ranges is empty due to a permission issue, an insufficient
      permission message will be given by status_message.
  *   `subnetwork` (*type:* `String.t`, *default:* `nil`) - Subnetwork Name.
      Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ipCidrRange => String.t(),
          :network => String.t(),
          :secondaryIpRanges =>
            list(GoogleApi.Container.V1.Model.UsableSubnetworkSecondaryRange.t()),
          :statusMessage => String.t(),
          :subnetwork => String.t()
        }

  field(:ipCidrRange)
  field(:network)

  field(
    :secondaryIpRanges,
    as: GoogleApi.Container.V1.Model.UsableSubnetworkSecondaryRange,
    type: :list
  )

  field(:statusMessage)
  field(:subnetwork)
end

defimpl Poison.Decoder, for: GoogleApi.Container.V1.Model.UsableSubnetwork do
  def decode(value, options) do
    GoogleApi.Container.V1.Model.UsableSubnetwork.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Container.V1.Model.UsableSubnetwork do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

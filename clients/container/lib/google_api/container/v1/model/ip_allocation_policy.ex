# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Container.V1.Model.IPAllocationPolicy do
  @moduledoc """
  Configuration for controlling how IPs are allocated in the cluster.

  ## Attributes

  *   `clusterIpv4Cidr` (*type:* `String.t`, *default:* `nil`) - This field is deprecated, use cluster_ipv4_cidr_block.
  *   `clusterIpv4CidrBlock` (*type:* `String.t`, *default:* `nil`) - The IP address range for the cluster pod IPs. If this field is set, then
      `cluster.cluster_ipv4_cidr` must be left blank.

      This field is only applicable when `use_ip_aliases` is true.

      Set to blank to have a range chosen with the default size.

      Set to /netmask (e.g. `/14`) to have a range chosen with a specific
      netmask.

      Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
      to use.
  *   `clusterSecondaryRangeName` (*type:* `String.t`, *default:* `nil`) - The name of the secondary range to be used for the cluster CIDR
      block.  The secondary range will be used for pod IP
      addresses. This must be an existing secondary range associated
      with the cluster subnetwork.

      This field is only applicable with use_ip_aliases is true and
      create_subnetwork is false.
  *   `createSubnetwork` (*type:* `boolean()`, *default:* `nil`) - Whether a new subnetwork will be created automatically for the cluster.

      This field is only applicable when `use_ip_aliases` is true.
  *   `nodeIpv4Cidr` (*type:* `String.t`, *default:* `nil`) - This field is deprecated, use node_ipv4_cidr_block.
  *   `nodeIpv4CidrBlock` (*type:* `String.t`, *default:* `nil`) - The IP address range of the instance IPs in this cluster.

      This is applicable only if `create_subnetwork` is true.

      Set to blank to have a range chosen with the default size.

      Set to /netmask (e.g. `/14`) to have a range chosen with a specific
      netmask.

      Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
      to use.
  *   `servicesIpv4Cidr` (*type:* `String.t`, *default:* `nil`) - This field is deprecated, use services_ipv4_cidr_block.
  *   `servicesIpv4CidrBlock` (*type:* `String.t`, *default:* `nil`) - The IP address range of the services IPs in this cluster. If blank, a range
      will be automatically chosen with the default size.

      This field is only applicable when `use_ip_aliases` is true.

      Set to blank to have a range chosen with the default size.

      Set to /netmask (e.g. `/14`) to have a range chosen with a specific
      netmask.

      Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
      to use.
  *   `servicesSecondaryRangeName` (*type:* `String.t`, *default:* `nil`) - The name of the secondary range to be used as for the services
      CIDR block.  The secondary range will be used for service
      ClusterIPs. This must be an existing secondary range associated
      with the cluster subnetwork.

      This field is only applicable with use_ip_aliases is true and
      create_subnetwork is false.
  *   `subnetworkName` (*type:* `String.t`, *default:* `nil`) - A custom subnetwork name to be used if `create_subnetwork` is true.  If
      this field is empty, then an automatic name will be chosen for the new
      subnetwork.
  *   `tpuIpv4CidrBlock` (*type:* `String.t`, *default:* `nil`) - The IP address range of the Cloud TPUs in this cluster. If unspecified, a
      range will be automatically chosen with the default size.

      This field is only applicable when `use_ip_aliases` is true.

      If unspecified, the range will use the default size.

      Set to /netmask (e.g. `/14`) to have a range chosen with a specific
      netmask.

      Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
      to use.
  *   `useIpAliases` (*type:* `boolean()`, *default:* `nil`) - Whether alias IPs will be used for pod IPs in the cluster.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :clusterIpv4Cidr => String.t(),
          :clusterIpv4CidrBlock => String.t(),
          :clusterSecondaryRangeName => String.t(),
          :createSubnetwork => boolean(),
          :nodeIpv4Cidr => String.t(),
          :nodeIpv4CidrBlock => String.t(),
          :servicesIpv4Cidr => String.t(),
          :servicesIpv4CidrBlock => String.t(),
          :servicesSecondaryRangeName => String.t(),
          :subnetworkName => String.t(),
          :tpuIpv4CidrBlock => String.t(),
          :useIpAliases => boolean()
        }

  field(:clusterIpv4Cidr)
  field(:clusterIpv4CidrBlock)
  field(:clusterSecondaryRangeName)
  field(:createSubnetwork)
  field(:nodeIpv4Cidr)
  field(:nodeIpv4CidrBlock)
  field(:servicesIpv4Cidr)
  field(:servicesIpv4CidrBlock)
  field(:servicesSecondaryRangeName)
  field(:subnetworkName)
  field(:tpuIpv4CidrBlock)
  field(:useIpAliases)
end

defimpl Poison.Decoder, for: GoogleApi.Container.V1.Model.IPAllocationPolicy do
  def decode(value, options) do
    GoogleApi.Container.V1.Model.IPAllocationPolicy.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Container.V1.Model.IPAllocationPolicy do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

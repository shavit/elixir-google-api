# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.GamesConfiguration.V1configuration.Api.ImageConfigurations do
  @moduledoc """
  API calls for all endpoints tagged `ImageConfigurations`.
  """

  alias GoogleApi.GamesConfiguration.V1configuration.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Uploads an image for a resource with the given ID and image type.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.GamesConfiguration.V1configuration.Connection.t`) - Connection to server
  *   `resource_id` (*type:* `String.t`) - The ID of the resource used by this method.
  *   `image_type` (*type:* `String.t`) - Selects which image in a resource for this method.
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration{}}` on success
  *   `{:error, info}` on failure
  """
  @spec games_configuration_image_configurations_upload(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration.t()}
          | {:error, Tesla.Env.t()}
  def games_configuration_image_configurations_upload(
        connection,
        resource_id,
        image_type,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/games/v1configuration/images/{resourceId}/imageType/{imageType}", %{
        "resourceId" => URI.encode(resource_id, &URI.char_unreserved?/1),
        "imageType" => URI.encode(image_type, &URI.char_unreserved?/1)
      })
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration{}]
    )
  end

  @doc """
  Uploads an image for a resource with the given ID and image type.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.GamesConfiguration.V1configuration.Connection.t`) - Connection to server
  *   `resource_id` (*type:* `String.t`) - The ID of the resource used by this method.
  *   `image_type` (*type:* `String.t`) - Selects which image in a resource for this method.
  *   `upload_type` (*type:* `String.t`) - Upload type. Must be "resumable".
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %{}}` on success
  *   `{:error, info}` on failure
  """
  @spec games_configuration_image_configurations_upload_resumable(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def games_configuration_image_configurations_upload_resumable(
        connection,
        resource_id,
        image_type,
        upload_type,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url(
        "/resumable/upload/games/v1configuration/images/{resourceId}/imageType/{imageType}",
        %{
          "resourceId" => URI.encode(resource_id, &URI.char_unreserved?/1),
          "imageType" => URI.encode(image_type, &URI.char_unreserved?/1)
        }
      )
      |> Request.add_param(:query, :uploadType, upload_type)
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [decode: false])
  end

  @doc """
  Uploads an image for a resource with the given ID and image type.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.GamesConfiguration.V1configuration.Connection.t`) - Connection to server
  *   `resource_id` (*type:* `String.t`) - The ID of the resource used by this method.
  *   `image_type` (*type:* `String.t`) - Selects which image in a resource for this method.
  *   `upload_type` (*type:* `String.t`) - Upload type. Must be "multipart".
  *   `metadata` (*type:* `String.t`) - string metadata
  *   `data` (*type:* `String.t`) - Path to file
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration{}}` on success
  *   `{:error, info}` on failure
  """
  @spec games_configuration_image_configurations_upload_simple(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword(),
          keyword()
        ) ::
          {:ok, GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration.t()}
          | {:error, Tesla.Env.t()}
  def games_configuration_image_configurations_upload_simple(
        connection,
        resource_id,
        image_type,
        upload_type,
        metadata,
        data,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/upload/games/v1configuration/images/{resourceId}/imageType/{imageType}", %{
        "resourceId" => URI.encode(resource_id, &URI.char_unreserved?/1),
        "imageType" => URI.encode(image_type, &URI.char_unreserved?/1)
      })
      |> Request.add_param(:query, :uploadType, upload_type)
      |> Request.add_param(:body, :metadata, metadata)
      |> Request.add_param(:file, :data, data)
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.GamesConfiguration.V1configuration.Model.ImageConfiguration{}]
    )
  end
end

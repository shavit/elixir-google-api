# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.FirebaseDynamicLinks.V1.Api.ManagedShortLinks do
  @moduledoc """
  API calls for all endpoints tagged `ManagedShortLinks`.
  """

  alias GoogleApi.FirebaseDynamicLinks.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Creates a managed short Dynamic Link given either a valid long Dynamic Link
  or details such as Dynamic Link domain, Android and iOS app information.
  The created short Dynamic Link will not expire.

  This differs from CreateShortDynamicLink in the following ways:
    - The request will also contain a name for the link (non unique name
      for the front end).
    - The response must be authenticated with an auth token (generated with
      the admin service account).
    - The link will appear in the FDL list of links in the console front end.

  The Dynamic Link domain in the request must be owned by requester's
  Firebase project.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.FirebaseDynamicLinks.V1.Connection.t`) - Connection to server
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:"$.xgafv"` (*type:* `String.t`) - V1 error format.
      *   `:access_token` (*type:* `String.t`) - OAuth access token.
      *   `:alt` (*type:* `String.t`) - Data format for response.
      *   `:callback` (*type:* `String.t`) - JSONP
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      *   `:uploadType` (*type:* `String.t`) - Legacy upload protocol for media (e.g. "media", "multipart").
      *   `:upload_protocol` (*type:* `String.t`) - Upload protocol for media (e.g. "raw", "multipart").
      *   `:body` (*type:* `GoogleApi.FirebaseDynamicLinks.V1.Model.CreateManagedShortLinkRequest.t`) - 
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.FirebaseDynamicLinks.V1.Model.CreateManagedShortLinkResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec firebasedynamiclinks_managed_short_links_create(Tesla.Env.client(), keyword(), keyword()) ::
          {:ok, GoogleApi.FirebaseDynamicLinks.V1.Model.CreateManagedShortLinkResponse.t()}
          | {:error, Tesla.Env.t()}
  def firebasedynamiclinks_managed_short_links_create(
        connection,
        optional_params \\ [],
        opts \\ []
      ) do
    optional_params_config = %{
      :"$.xgafv" => :query,
      :access_token => :query,
      :alt => :query,
      :callback => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :uploadType => :query,
      :upload_protocol => :query,
      :body => :body
    }

    request =
      Request.new()
      |> Request.method(:post)
      |> Request.url("/v1/managedShortLinks:create", %{})
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.FirebaseDynamicLinks.V1.Model.CreateManagedShortLinkResponse{}]
    )
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.IAM.V1.Model.LintPolicyResponse do
  @moduledoc """
  The response of a lint operation. An empty response indicates
  the operation was able to fully execute and no lint issue was found.

  ## Attributes

  *   `lintResults` (*type:* `list(GoogleApi.IAM.V1.Model.LintResult.t)`, *default:* `nil`) - List of lint results sorted by a composite <severity, binding_ordinal> key,
      descending order of severity and ascending order of binding_ordinal.
      There is no certain order among the same keys.

      For cross-binding results (only if the input object to lint is
      instance of google.iam.v1.Policy), there will be a
      google.iam.admin.v1.LintResult for each of the involved bindings,
      and the associated debug_message may enumerate the other involved
      binding ordinal number(s).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :lintResults => list(GoogleApi.IAM.V1.Model.LintResult.t())
        }

  field(:lintResults, as: GoogleApi.IAM.V1.Model.LintResult, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.IAM.V1.Model.LintPolicyResponse do
  def decode(value, options) do
    GoogleApi.IAM.V1.Model.LintPolicyResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.IAM.V1.Model.LintPolicyResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AppsActivity.V1.Api.Activities do
  @moduledoc """
  API calls for all endpoints tagged `Activities`.
  """

  alias GoogleApi.AppsActivity.V1.Connection
  alias GoogleApi.Gax.{Request, Response}

  @library_version Mix.Project.config() |> Keyword.get(:version, "")

  @doc """
  Returns a list of activities visible to the current logged in user. Visible activities are determined by the visibility settings of the object that was acted on, e.g. Drive files a user can see. An activity is a record of past events. Multiple events may be merged if they are similar. A request is scoped to activities from a given Google service using the source parameter.

  ## Parameters

  *   `connection` (*type:* `GoogleApi.AppsActivity.V1.Connection.t`) - Connection to server
  *   `optional_params` (*type:* `keyword()`) - Optional parameters
      *   `:alt` (*type:* `String.t`) - Data format for the response.
      *   `:fields` (*type:* `String.t`) - Selector specifying which fields to include in a partial response.
      *   `:key` (*type:* `String.t`) - API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      *   `:oauth_token` (*type:* `String.t`) - OAuth 2.0 token for the current user.
      *   `:prettyPrint` (*type:* `boolean()`) - Returns response with indentations and line breaks.
      *   `:quotaUser` (*type:* `String.t`) - An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
      *   `:userIp` (*type:* `String.t`) - Deprecated. Please use quotaUser instead.
      *   `:"drive.ancestorId"` (*type:* `String.t`) - Identifies the Drive folder containing the items for which to return activities.
      *   `:"drive.fileId"` (*type:* `String.t`) - Identifies the Drive item to return activities for.
      *   `:groupingStrategy` (*type:* `String.t`) - Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object.
      *   `:pageSize` (*type:* `integer()`) - The maximum number of events to return on a page. The response includes a continuation token if there are more events.
      *   `:pageToken` (*type:* `String.t`) - A token to retrieve a specific page of results.
      *   `:source` (*type:* `String.t`) - The Google service from which to return activities. Possible values of source are: 
          - drive.google.com
      *   `:userId` (*type:* `String.t`) - The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user.
  *   `opts` (*type:* `keyword()`) - Call options

  ## Returns

  *   `{:ok, %GoogleApi.AppsActivity.V1.Model.ListActivitiesResponse{}}` on success
  *   `{:error, info}` on failure
  """
  @spec appsactivity_activities_list(Tesla.Env.client(), keyword(), keyword()) ::
          {:ok, GoogleApi.AppsActivity.V1.Model.ListActivitiesResponse.t()}
          | {:error, Tesla.Env.t()}
  def appsactivity_activities_list(connection, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :"drive.ancestorId" => :query,
      :"drive.fileId" => :query,
      :groupingStrategy => :query,
      :pageSize => :query,
      :pageToken => :query,
      :source => :query,
      :userId => :query
    }

    request =
      Request.new()
      |> Request.method(:get)
      |> Request.url("/activities", %{})
      |> Request.add_optional_params(optional_params_config, optional_params)
      |> Request.library_version(@library_version)

    connection
    |> Connection.execute(request)
    |> Response.decode(
      opts ++ [struct: %GoogleApi.AppsActivity.V1.Model.ListActivitiesResponse{}]
    )
  end
end

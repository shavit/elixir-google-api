# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AppEngine.V1.Model.CertificateRawData do
  @moduledoc """
  An SSL certificate obtained from a certificate authority.

  ## Attributes

  *   `privateKey` (*type:* `String.t`, *default:* `nil`) - Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: <pre> -----BEGIN RSA PRIVATE KEY----- <unencrypted_key_value> -----END RSA PRIVATE KEY----- </pre> @InputOnly
  *   `publicCertificate` (*type:* `String.t`, *default:* `nil`) - PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: <pre> -----BEGIN CERTIFICATE----- <certificate_value> -----END CERTIFICATE----- </pre>
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :privateKey => String.t(),
          :publicCertificate => String.t()
        }

  field(:privateKey)
  field(:publicCertificate)
end

defimpl Poison.Decoder, for: GoogleApi.AppEngine.V1.Model.CertificateRawData do
  def decode(value, options) do
    GoogleApi.AppEngine.V1.Model.CertificateRawData.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AppEngine.V1.Model.CertificateRawData do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

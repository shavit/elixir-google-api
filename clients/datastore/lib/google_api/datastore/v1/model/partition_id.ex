# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastore.V1.Model.PartitionId do
  @moduledoc """
  A partition ID identifies a grouping of entities. The grouping is always
  by project and namespace, however the namespace ID may be empty.

  A partition ID contains several dimensions:
  project ID and namespace ID.

  Partition dimensions:

  - May be `""`.
  - Must be valid UTF-8 bytes.
  - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`
  If the value of any dimension matches regex `__.*__`, the partition is
  reserved/read-only.
  A reserved/read-only partition ID is forbidden in certain documented
  contexts.

  Foreign partition IDs (in which the project ID does
  not match the context project ID ) are discouraged.
  Reads and writes of foreign partition IDs may fail if the project is not in an active state.

  ## Attributes

  *   `namespaceId` (*type:* `String.t`, *default:* `nil`) - If not empty, the ID of the namespace to which the entities belong.
  *   `projectId` (*type:* `String.t`, *default:* `nil`) - The ID of the project to which the entities belong.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :namespaceId => String.t(),
          :projectId => String.t()
        }

  field(:namespaceId)
  field(:projectId)
end

defimpl Poison.Decoder, for: GoogleApi.Datastore.V1.Model.PartitionId do
  def decode(value, options) do
    GoogleApi.Datastore.V1.Model.PartitionId.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastore.V1.Model.PartitionId do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastore.V1.Model.Entity do
  @moduledoc """
  A Datastore data object.

  An entity is limited to 1 megabyte when stored. That _roughly_
  corresponds to a limit of 1 megabyte for the serialized form of this
  message.

  ## Attributes

  *   `key` (*type:* `GoogleApi.Datastore.V1.Model.Key.t`, *default:* `nil`) - The entity's key.

      An entity must have a key, unless otherwise documented (for example,
      an entity in `Value.entity_value` may have no key).
      An entity's kind is its key path's last element's kind,
      or null if it has no key.
  *   `properties` (*type:* `%{optional(String.t) => GoogleApi.Datastore.V1.Model.Value.t}`, *default:* `nil`) - The entity's properties.
      The map's keys are property names.
      A property name matching regex `__.*__` is reserved.
      A reserved property name is forbidden in certain documented contexts.
      The name must not contain more than 500 characters.
      The name cannot be `""`.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :key => GoogleApi.Datastore.V1.Model.Key.t(),
          :properties => %{optional(String.t()) => GoogleApi.Datastore.V1.Model.Value.t()}
        }

  field(:key, as: GoogleApi.Datastore.V1.Model.Key)
  field(:properties, as: GoogleApi.Datastore.V1.Model.Value, type: :map)
end

defimpl Poison.Decoder, for: GoogleApi.Datastore.V1.Model.Entity do
  def decode(value, options) do
    GoogleApi.Datastore.V1.Model.Entity.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastore.V1.Model.Entity do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

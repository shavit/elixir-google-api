# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Datastore.V1.Model.Mutation do
  @moduledoc """
  A mutation to apply to an entity.

  ## Attributes

  *   `baseVersion` (*type:* `String.t`, *default:* `nil`) - The version of the entity that this mutation is being applied to. If this
      does not match the current version on the server, the mutation conflicts.
  *   `delete` (*type:* `GoogleApi.Datastore.V1.Model.Key.t`, *default:* `nil`) - The key of the entity to delete. The entity may or may not already exist.
      Must have a complete key path and must not be reserved/read-only.
  *   `insert` (*type:* `GoogleApi.Datastore.V1.Model.Entity.t`, *default:* `nil`) - The entity to insert. The entity must not already exist.
      The entity key's final path element may be incomplete.
  *   `update` (*type:* `GoogleApi.Datastore.V1.Model.Entity.t`, *default:* `nil`) - The entity to update. The entity must already exist.
      Must have a complete key path.
  *   `upsert` (*type:* `GoogleApi.Datastore.V1.Model.Entity.t`, *default:* `nil`) - The entity to upsert. The entity may or may not already exist.
      The entity key's final path element may be incomplete.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :baseVersion => String.t(),
          :delete => GoogleApi.Datastore.V1.Model.Key.t(),
          :insert => GoogleApi.Datastore.V1.Model.Entity.t(),
          :update => GoogleApi.Datastore.V1.Model.Entity.t(),
          :upsert => GoogleApi.Datastore.V1.Model.Entity.t()
        }

  field(:baseVersion)
  field(:delete, as: GoogleApi.Datastore.V1.Model.Key)
  field(:insert, as: GoogleApi.Datastore.V1.Model.Entity)
  field(:update, as: GoogleApi.Datastore.V1.Model.Entity)
  field(:upsert, as: GoogleApi.Datastore.V1.Model.Entity)
end

defimpl Poison.Decoder, for: GoogleApi.Datastore.V1.Model.Mutation do
  def decode(value, options) do
    GoogleApi.Datastore.V1.Model.Mutation.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Datastore.V1.Model.Mutation do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

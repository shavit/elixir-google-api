# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Books.V1.Model.GeolayerdataGeo do
  @moduledoc """


  ## Attributes

  *   `boundary` (*type:* `list(list(GoogleApi.Books.V1.Model.GeolayerdataGeoBoundary.t))`, *default:* `nil`) - The boundary of the location as a set of loops containing pairs of latitude, longitude coordinates.
  *   `cachePolicy` (*type:* `String.t`, *default:* `nil`) - The cache policy active for this data. EX: UNRESTRICTED, RESTRICTED, NEVER
  *   `countryCode` (*type:* `String.t`, *default:* `nil`) - The country code of the location.
  *   `latitude` (*type:* `float()`, *default:* `nil`) - The latitude of the location.
  *   `longitude` (*type:* `float()`, *default:* `nil`) - The longitude of the location.
  *   `mapType` (*type:* `String.t`, *default:* `nil`) - The type of map that should be used for this location. EX: HYBRID, ROADMAP, SATELLITE, TERRAIN
  *   `viewport` (*type:* `GoogleApi.Books.V1.Model.GeolayerdataGeoViewport.t`, *default:* `nil`) - The viewport for showing this location. This is a latitude, longitude rectangle.
  *   `zoom` (*type:* `integer()`, *default:* `nil`) - The Zoom level to use for the map. Zoom levels between 0 (the lowest zoom level, in which the entire world can be seen on one map) to 21+ (down to individual buildings). See: https://developers.google.com/maps/documentation/staticmaps/#Zoomlevels
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :boundary => list(list(GoogleApi.Books.V1.Model.GeolayerdataGeoBoundary.t())),
          :cachePolicy => String.t(),
          :countryCode => String.t(),
          :latitude => float(),
          :longitude => float(),
          :mapType => String.t(),
          :viewport => GoogleApi.Books.V1.Model.GeolayerdataGeoViewport.t(),
          :zoom => integer()
        }

  field(:boundary, type: :list)
  field(:cachePolicy)
  field(:countryCode)
  field(:latitude)
  field(:longitude)
  field(:mapType)
  field(:viewport, as: GoogleApi.Books.V1.Model.GeolayerdataGeoViewport)
  field(:zoom)
end

defimpl Poison.Decoder, for: GoogleApi.Books.V1.Model.GeolayerdataGeo do
  def decode(value, options) do
    GoogleApi.Books.V1.Model.GeolayerdataGeo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Books.V1.Model.GeolayerdataGeo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

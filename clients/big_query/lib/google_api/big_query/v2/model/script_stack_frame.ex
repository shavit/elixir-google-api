# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.BigQuery.V2.Model.ScriptStackFrame do
  @moduledoc """


  ## Attributes

  *   `endColumn` (*type:* `integer()`, *default:* `nil`) - [Output-only] One-based end column.
  *   `endLine` (*type:* `integer()`, *default:* `nil`) - [Output-only] One-based end line.
  *   `procedureId` (*type:* `String.t`, *default:* `nil`) - [Output-only] Name of the active procedure, empty if in a top-level script.
  *   `startColumn` (*type:* `integer()`, *default:* `nil`) - [Output-only] One-based start column.
  *   `startLine` (*type:* `integer()`, *default:* `nil`) - [Output-only] One-based start line.
  *   `text` (*type:* `String.t`, *default:* `nil`) - [Output-only] Text of the current statement/expression.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :endColumn => integer(),
          :endLine => integer(),
          :procedureId => String.t(),
          :startColumn => integer(),
          :startLine => integer(),
          :text => String.t()
        }

  field(:endColumn)
  field(:endLine)
  field(:procedureId)
  field(:startColumn)
  field(:startLine)
  field(:text)
end

defimpl Poison.Decoder, for: GoogleApi.BigQuery.V2.Model.ScriptStackFrame do
  def decode(value, options) do
    GoogleApi.BigQuery.V2.Model.ScriptStackFrame.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.BigQuery.V2.Model.ScriptStackFrame do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_AutoScaling do
  @moduledoc """
  Options for automatically scaling a model.

  ## Attributes

  *   `minNodes` (*type:* `integer()`, *default:* `nil`) - Optional. The minimum number of nodes to allocate for this model. These
      nodes are always up, starting from the time the model is deployed.
      Therefore, the cost of operating this model will be at least
      `rate` * `min_nodes` * number of hours since last billing cycle,
      where `rate` is the cost per node-hour as documented in the
      [pricing guide](/ml-engine/docs/pricing),
      even if no predictions are performed. There is additional cost for each
      prediction performed.

      Unlike manual scaling, if the load gets too heavy for the nodes
      that are up, the service will automatically add nodes to handle the
      increased load as well as scale back as traffic drops, always maintaining
      at least `min_nodes`. You will be charged for the time in which additional
      nodes are used.

      If not specified, `min_nodes` defaults to 0, in which case, when traffic
      to a model stops (and after a cool-down period), nodes will be shut down
      and no charges will be incurred until traffic to the model resumes.

      You can set `min_nodes` when creating the model version, and you can also
      update `min_nodes` for an existing version:
      <pre>
      update_body.json:
      {
        'autoScaling': {
          'minNodes': 5
        }
      }
      </pre>
      HTTP request:
      <pre>
      PATCH
      https://ml.googleapis.com/v1/{name=projects/*/models/*/versions/*}?update_mask=autoScaling.minNodes
      -d @./update_body.json
      </pre>
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :minNodes => integer()
        }

  field(:minNodes)
end

defimpl Poison.Decoder, for: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_AutoScaling do
  def decode(value, options) do
    GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_AutoScaling.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.MachineLearning.V1.Model.GoogleCloudMlV1_AutoScaling do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

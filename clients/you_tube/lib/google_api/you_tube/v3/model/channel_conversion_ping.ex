# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.YouTube.V3.Model.ChannelConversionPing do
  @moduledoc """
  Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.

  ## Attributes

  *   `context` (*type:* `String.t`, *default:* `nil`) - Defines the context of the ping.
  *   `conversionUrl` (*type:* `String.t`, *default:* `nil`) - The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :context => String.t(),
          :conversionUrl => String.t()
        }

  field(:context)
  field(:conversionUrl)
end

defimpl Poison.Decoder, for: GoogleApi.YouTube.V3.Model.ChannelConversionPing do
  def decode(value, options) do
    GoogleApi.YouTube.V3.Model.ChannelConversionPing.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.YouTube.V3.Model.ChannelConversionPing do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Language.V1.Model.Token do
  @moduledoc """
  Represents the smallest syntactic building block of the text.

  ## Attributes

  *   `dependencyEdge` (*type:* `GoogleApi.Language.V1.Model.DependencyEdge.t`, *default:* `nil`) - Dependency tree parse for this token.
  *   `lemma` (*type:* `String.t`, *default:* `nil`) - [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
  *   `partOfSpeech` (*type:* `GoogleApi.Language.V1.Model.PartOfSpeech.t`, *default:* `nil`) - Parts of speech tag for this token.
  *   `text` (*type:* `GoogleApi.Language.V1.Model.TextSpan.t`, *default:* `nil`) - The token text.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dependencyEdge => GoogleApi.Language.V1.Model.DependencyEdge.t(),
          :lemma => String.t(),
          :partOfSpeech => GoogleApi.Language.V1.Model.PartOfSpeech.t(),
          :text => GoogleApi.Language.V1.Model.TextSpan.t()
        }

  field(:dependencyEdge, as: GoogleApi.Language.V1.Model.DependencyEdge)
  field(:lemma)
  field(:partOfSpeech, as: GoogleApi.Language.V1.Model.PartOfSpeech)
  field(:text, as: GoogleApi.Language.V1.Model.TextSpan)
end

defimpl Poison.Decoder, for: GoogleApi.Language.V1.Model.Token do
  def decode(value, options) do
    GoogleApi.Language.V1.Model.Token.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Language.V1.Model.Token do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudKMS.V1.Model.ImportCryptoKeyVersionRequest do
  @moduledoc """
  Request message for KeyManagementService.ImportCryptoKeyVersion.

  ## Attributes

  *   `algorithm` (*type:* `String.t`, *default:* `nil`) - Required. The algorithm of
      the key being imported. This does not need to match the
      version_template of the CryptoKey this
      version imports into.
  *   `importJob` (*type:* `String.t`, *default:* `nil`) - Required. The name of the ImportJob that was used to
      wrap this key material.
  *   `rsaAesWrappedKey` (*type:* `String.t`, *default:* `nil`) - Wrapped key material produced with
      RSA_OAEP_3072_SHA1_AES_256
      or
      RSA_OAEP_4096_SHA1_AES_256.

      This field contains the concatenation of two wrapped keys:
      <ol>
        <li>An ephemeral AES-256 wrapping key wrapped with the
            public_key using RSAES-OAEP with SHA-1,
            MGF1 with SHA-1, and an empty label.
        </li>
        <li>The key to be imported, wrapped with the ephemeral AES-256 key
            using AES-KWP (RFC 5649).
        </li>
      </ol>

      This format is the same as the format produced by PKCS#11 mechanism
      CKM_RSA_AES_KEY_WRAP.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :algorithm => String.t(),
          :importJob => String.t(),
          :rsaAesWrappedKey => String.t()
        }

  field(:algorithm)
  field(:importJob)
  field(:rsaAesWrappedKey)
end

defimpl Poison.Decoder, for: GoogleApi.CloudKMS.V1.Model.ImportCryptoKeyVersionRequest do
  def decode(value, options) do
    GoogleApi.CloudKMS.V1.Model.ImportCryptoKeyVersionRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudKMS.V1.Model.ImportCryptoKeyVersionRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

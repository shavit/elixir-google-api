# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AdExchangeBuyer.V2beta1.Model.CreativeSize do
  @moduledoc """
  Specifies the size of the creative.

  ## Attributes

  *   `allowedFormats` (*type:* `list(String.t)`, *default:* `nil`) - What formats are allowed by the publisher.
      If this repeated field is empty then all formats are allowed.
      For example, if this field contains AllowedFormatType.AUDIO then the
      publisher only allows an audio ad (without any video).
  *   `companionSizes` (*type:* `list(GoogleApi.AdExchangeBuyer.V2beta1.Model.Size.t)`, *default:* `nil`) - For video creatives specifies the sizes of companion ads (if present).
      Companion sizes may be filled in only when creative_size_type = VIDEO
  *   `creativeSizeType` (*type:* `String.t`, *default:* `nil`) - The creative size type.
  *   `nativeTemplate` (*type:* `String.t`, *default:* `nil`) - Output only. The native template for this creative. It will have a value
      only if creative_size_type = CreativeSizeType.NATIVE.
  *   `size` (*type:* `GoogleApi.AdExchangeBuyer.V2beta1.Model.Size.t`, *default:* `nil`) - For regular or video creative size type, specifies the size
      of the creative
  *   `skippableAdType` (*type:* `String.t`, *default:* `nil`) - The type of skippable ad for this creative. It will have a value only if
      creative_size_type = CreativeSizeType.VIDEO.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowedFormats => list(String.t()),
          :companionSizes => list(GoogleApi.AdExchangeBuyer.V2beta1.Model.Size.t()),
          :creativeSizeType => String.t(),
          :nativeTemplate => String.t(),
          :size => GoogleApi.AdExchangeBuyer.V2beta1.Model.Size.t(),
          :skippableAdType => String.t()
        }

  field(:allowedFormats, type: :list)
  field(:companionSizes, as: GoogleApi.AdExchangeBuyer.V2beta1.Model.Size, type: :list)
  field(:creativeSizeType)
  field(:nativeTemplate)
  field(:size, as: GoogleApi.AdExchangeBuyer.V2beta1.Model.Size)
  field(:skippableAdType)
end

defimpl Poison.Decoder, for: GoogleApi.AdExchangeBuyer.V2beta1.Model.CreativeSize do
  def decode(value, options) do
    GoogleApi.AdExchangeBuyer.V2beta1.Model.CreativeSize.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AdExchangeBuyer.V2beta1.Model.CreativeSize do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.DoubleClickSearch.V2.Model.ReportRequestFilters do
  @moduledoc """


  ## Attributes

  *   `column` (*type:* `GoogleApi.DoubleClickSearch.V2.Model.ReportApiColumnSpec.t`, *default:* `nil`) - Column to perform the filter on. This can be a DoubleClick Search column or a saved column.
  *   `operator` (*type:* `String.t`, *default:* `nil`) - Operator to use in the filter. See the filter reference for a list of available operators.
  *   `values` (*type:* `list(any())`, *default:* `nil`) - A list of values to filter the column value against.
      The maximum number of filter values per request is 300.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :column => GoogleApi.DoubleClickSearch.V2.Model.ReportApiColumnSpec.t(),
          :operator => String.t(),
          :values => list(any())
        }

  field(:column, as: GoogleApi.DoubleClickSearch.V2.Model.ReportApiColumnSpec)
  field(:operator)
  field(:values, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.DoubleClickSearch.V2.Model.ReportRequestFilters do
  def decode(value, options) do
    GoogleApi.DoubleClickSearch.V2.Model.ReportRequestFilters.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.DoubleClickSearch.V2.Model.ReportRequestFilters do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

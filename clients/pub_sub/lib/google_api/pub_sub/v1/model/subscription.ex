# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.PubSub.V1.Model.Subscription do
  @moduledoc """
  A subscription resource.

  ## Attributes

  *   `ackDeadlineSeconds` (*type:* `integer()`, *default:* `nil`) - The approximate amount of time (on a best-effort basis) Pub/Sub waits for
      the subscriber to acknowledge receipt before resending the message. In the
      interval after the message is delivered and before it is acknowledged, it
      is considered to be <i>outstanding</i>. During that time period, the
      message will not be redelivered (on a best-effort basis).

      For pull subscriptions, this value is used as the initial value for the ack
      deadline. To override this value for a given message, call
      `ModifyAckDeadline` with the corresponding `ack_id` if using
      non-streaming pull or send the `ack_id` in a
      `StreamingModifyAckDeadlineRequest` if using streaming pull.
      The minimum custom deadline you can specify is 10 seconds.
      The maximum custom deadline you can specify is 600 seconds (10 minutes).
      If this parameter is 0, a default value of 10 seconds is used.

      For push delivery, this value is also used to set the request timeout for
      the call to the push endpoint.

      If the subscriber never acknowledges the message, the Pub/Sub
      system will eventually redeliver the message.
  *   `expirationPolicy` (*type:* `GoogleApi.PubSub.V1.Model.ExpirationPolicy.t`, *default:* `nil`) - A policy that specifies the conditions for this subscription's expiration.
      A subscription is considered active as long as any connected subscriber is
      successfully consuming messages from the subscription or is issuing
      operations on the subscription. If `expiration_policy` is not set, a
      *default policy* with `ttl` of 31 days will be used. The minimum allowed
      value for `expiration_policy.ttl` is 1 day.
  *   `labels` (*type:* `map()`, *default:* `nil`) - See <a href="https://cloud.google.com/pubsub/docs/labels"> Creating and
      managing labels</a>.
  *   `messageRetentionDuration` (*type:* `String.t`, *default:* `nil`) - How long to retain unacknowledged messages in the subscription's backlog,
      from the moment a message is published.
      If `retain_acked_messages` is true, then this also configures the retention
      of acknowledged messages, and thus configures how far back in time a `Seek`
      can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10
      minutes.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The name of the subscription. It must have the format
      `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
      start with a letter, and contain only letters (`[A-Za-z]`), numbers
      (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
      plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
      in length, and it must not start with `"goog"`.
  *   `pushConfig` (*type:* `GoogleApi.PubSub.V1.Model.PushConfig.t`, *default:* `nil`) - If push delivery is used with this subscription, this field is
      used to configure it. An empty `pushConfig` signifies that the subscriber
      will pull and ack messages using API methods.
  *   `retainAckedMessages` (*type:* `boolean()`, *default:* `nil`) - Indicates whether to retain acknowledged messages. If true, then
      messages are not expunged from the subscription's backlog, even if they are
      acknowledged, until they fall out of the `message_retention_duration`
      window. This must be true if you would like to
      <a
      href="https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time">
      Seek to a timestamp</a>.
  *   `topic` (*type:* `String.t`, *default:* `nil`) - The name of the topic from which this subscription is receiving messages.
      Format is `projects/{project}/topics/{topic}`.
      The value of this field will be `_deleted-topic_` if the topic has been
      deleted.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ackDeadlineSeconds => integer(),
          :expirationPolicy => GoogleApi.PubSub.V1.Model.ExpirationPolicy.t(),
          :labels => map(),
          :messageRetentionDuration => String.t(),
          :name => String.t(),
          :pushConfig => GoogleApi.PubSub.V1.Model.PushConfig.t(),
          :retainAckedMessages => boolean(),
          :topic => String.t()
        }

  field(:ackDeadlineSeconds)
  field(:expirationPolicy, as: GoogleApi.PubSub.V1.Model.ExpirationPolicy)
  field(:labels, type: :map)
  field(:messageRetentionDuration)
  field(:name)
  field(:pushConfig, as: GoogleApi.PubSub.V1.Model.PushConfig)
  field(:retainAckedMessages)
  field(:topic)
end

defimpl Poison.Decoder, for: GoogleApi.PubSub.V1.Model.Subscription do
  def decode(value, options) do
    GoogleApi.PubSub.V1.Model.Subscription.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.PubSub.V1.Model.Subscription do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

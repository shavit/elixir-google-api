# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CivicInfo.V2.Model.StreetSegment do
  @moduledoc """


  ## Attributes

  *   `ncoaAddress` (*type:* `String.t`, *default:* `nil`) - 
  *   `unitType` (*type:* `String.t`, *default:* `nil`) - 
  *   `unitNumber` (*type:* `String.t`, *default:* `nil`) - 
  *   `congressionalDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `stateHouseDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `precinctName` (*type:* `String.t`, *default:* `nil`) - 
  *   `geographicDivisionOcdIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `vanPrecinctCode` (*type:* `String.t`, *default:* `nil`) - 
  *   `startLatE7` (*type:* `String.t`, *default:* `nil`) - 
  *   `published` (*type:* `boolean()`, *default:* `nil`) - 
  *   `contestIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `geocodedPoint` (*type:* `GoogleApi.CivicInfo.V2.Model.PointProto.t`, *default:* `nil`) - 
  *   `startLngE7` (*type:* `String.t`, *default:* `nil`) - 
  *   `municipalDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `id` (*type:* `String.t`, *default:* `nil`) - 
  *   `streetName` (*type:* `String.t`, *default:* `nil`) - 
  *   `subAdministrativeAreaName` (*type:* `String.t`, *default:* `nil`) - 
  *   `surrogateId` (*type:* `String.t`, *default:* `nil`) - 
  *   `pollinglocationByIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `countyCouncilDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `oddOrEvens` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `datasetId` (*type:* `String.t`, *default:* `nil`) - 
  *   `originalId` (*type:* `String.t`, *default:* `nil`) - 
  *   `state` (*type:* `String.t`, *default:* `nil`) - 
  *   `countyFips` (*type:* `String.t`, *default:* `nil`) - 
  *   `targetsmartUniquePrecinctCode` (*type:* `String.t`, *default:* `nil`) - 
  *   `precinctOcdId` (*type:* `String.t`, *default:* `nil`) - 
  *   `earlyVoteSiteByIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `wildcard` (*type:* `boolean()`, *default:* `nil`) - 
  *   `city` (*type:* `String.t`, *default:* `nil`) - 
  *   `beforeGeocodeId` (*type:* `String.t`, *default:* `nil`) - 
  *   `cityCouncilDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `wardDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `provenances` (*type:* `list(GoogleApi.CivicInfo.V2.Model.Provenance.t)`, *default:* `nil`) - 
  *   `administrationRegionIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  *   `schoolDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `zip` (*type:* `String.t`, *default:* `nil`) - 
  *   `judicialDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `mailOnly` (*type:* `boolean()`, *default:* `nil`) - 
  *   `townshipDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `endHouseNumber` (*type:* `String.t`, *default:* `nil`) - 
  *   `catalistUniquePrecinctCode` (*type:* `String.t`, *default:* `nil`) - 
  *   `startHouseNumber` (*type:* `String.t`, *default:* `nil`) - 
  *   `stateSenateDistrict` (*type:* `String.t`, *default:* `nil`) - 
  *   `voterGeographicDivisionOcdIds` (*type:* `list(String.t)`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ncoaAddress => String.t(),
          :unitType => String.t(),
          :unitNumber => String.t(),
          :congressionalDistrict => String.t(),
          :stateHouseDistrict => String.t(),
          :precinctName => String.t(),
          :geographicDivisionOcdIds => list(String.t()),
          :vanPrecinctCode => String.t(),
          :startLatE7 => String.t(),
          :published => boolean(),
          :contestIds => list(String.t()),
          :geocodedPoint => GoogleApi.CivicInfo.V2.Model.PointProto.t(),
          :startLngE7 => String.t(),
          :municipalDistrict => String.t(),
          :id => String.t(),
          :streetName => String.t(),
          :subAdministrativeAreaName => String.t(),
          :surrogateId => String.t(),
          :pollinglocationByIds => list(String.t()),
          :countyCouncilDistrict => String.t(),
          :oddOrEvens => list(String.t()),
          :datasetId => String.t(),
          :originalId => String.t(),
          :state => String.t(),
          :countyFips => String.t(),
          :targetsmartUniquePrecinctCode => String.t(),
          :precinctOcdId => String.t(),
          :earlyVoteSiteByIds => list(String.t()),
          :wildcard => boolean(),
          :city => String.t(),
          :beforeGeocodeId => String.t(),
          :cityCouncilDistrict => String.t(),
          :wardDistrict => String.t(),
          :provenances => list(GoogleApi.CivicInfo.V2.Model.Provenance.t()),
          :administrationRegionIds => list(String.t()),
          :schoolDistrict => String.t(),
          :zip => String.t(),
          :judicialDistrict => String.t(),
          :mailOnly => boolean(),
          :townshipDistrict => String.t(),
          :endHouseNumber => String.t(),
          :catalistUniquePrecinctCode => String.t(),
          :startHouseNumber => String.t(),
          :stateSenateDistrict => String.t(),
          :voterGeographicDivisionOcdIds => list(String.t())
        }

  field(:ncoaAddress)
  field(:unitType)
  field(:unitNumber)
  field(:congressionalDistrict)
  field(:stateHouseDistrict)
  field(:precinctName)
  field(:geographicDivisionOcdIds, type: :list)
  field(:vanPrecinctCode)
  field(:startLatE7)
  field(:published)
  field(:contestIds, type: :list)
  field(:geocodedPoint, as: GoogleApi.CivicInfo.V2.Model.PointProto)
  field(:startLngE7)
  field(:municipalDistrict)
  field(:id)
  field(:streetName)
  field(:subAdministrativeAreaName)
  field(:surrogateId)
  field(:pollinglocationByIds, type: :list)
  field(:countyCouncilDistrict)
  field(:oddOrEvens, type: :list)
  field(:datasetId)
  field(:originalId)
  field(:state)
  field(:countyFips)
  field(:targetsmartUniquePrecinctCode)
  field(:precinctOcdId)
  field(:earlyVoteSiteByIds, type: :list)
  field(:wildcard)
  field(:city)
  field(:beforeGeocodeId)
  field(:cityCouncilDistrict)
  field(:wardDistrict)
  field(:provenances, as: GoogleApi.CivicInfo.V2.Model.Provenance, type: :list)
  field(:administrationRegionIds, type: :list)
  field(:schoolDistrict)
  field(:zip)
  field(:judicialDistrict)
  field(:mailOnly)
  field(:townshipDistrict)
  field(:endHouseNumber)
  field(:catalistUniquePrecinctCode)
  field(:startHouseNumber)
  field(:stateSenateDistrict)
  field(:voterGeographicDivisionOcdIds, type: :list)
end

defimpl Poison.Decoder, for: GoogleApi.CivicInfo.V2.Model.StreetSegment do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.StreetSegment.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CivicInfo.V2.Model.StreetSegment do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

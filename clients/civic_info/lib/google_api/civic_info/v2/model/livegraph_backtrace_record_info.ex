# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfo do
  @moduledoc """


  ## Attributes

  *   `dataSourcePublishMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `expId` (*type:* `String.t`, *default:* `nil`) - 
  *   `expInfo` (*type:* `GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfoExpInfo.t`, *default:* `nil`) - 
  *   `isRecon` (*type:* `boolean()`, *default:* `nil`) - 
  *   `isWlmThrottled` (*type:* `boolean()`, *default:* `nil`) - 
  *   `numberOfTriples` (*type:* `String.t`, *default:* `nil`) - 
  *   `priority` (*type:* `String.t`, *default:* `nil`) - 
  *   `process` (*type:* `String.t`, *default:* `nil`) - 
  *   `proxyReceiveMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `proxySentMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `recordId` (*type:* `String.t`, *default:* `nil`) - 
  *   `shouldMonitorLatency` (*type:* `boolean()`, *default:* `nil`) - 
  *   `subscriberReceiveMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `topicBuildFinishMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `topicBuildStartMsec` (*type:* `String.t`, *default:* `nil`) - 
  *   `version` (*type:* `String.t`, *default:* `nil`) - 
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :dataSourcePublishMsec => String.t(),
          :expId => String.t(),
          :expInfo => GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfoExpInfo.t(),
          :isRecon => boolean(),
          :isWlmThrottled => boolean(),
          :numberOfTriples => String.t(),
          :priority => String.t(),
          :process => String.t(),
          :proxyReceiveMsec => String.t(),
          :proxySentMsec => String.t(),
          :recordId => String.t(),
          :shouldMonitorLatency => boolean(),
          :subscriberReceiveMsec => String.t(),
          :topicBuildFinishMsec => String.t(),
          :topicBuildStartMsec => String.t(),
          :version => String.t()
        }

  field(:dataSourcePublishMsec)
  field(:expId)
  field(:expInfo, as: GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfoExpInfo)
  field(:isRecon)
  field(:isWlmThrottled)
  field(:numberOfTriples)
  field(:priority)
  field(:process)
  field(:proxyReceiveMsec)
  field(:proxySentMsec)
  field(:recordId)
  field(:shouldMonitorLatency)
  field(:subscriberReceiveMsec)
  field(:topicBuildFinishMsec)
  field(:topicBuildStartMsec)
  field(:version)
end

defimpl Poison.Decoder, for: GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfo do
  def decode(value, options) do
    GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfo.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CivicInfo.V2.Model.LivegraphBacktraceRecordInfo do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

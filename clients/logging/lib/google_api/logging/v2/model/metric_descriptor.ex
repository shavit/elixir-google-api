# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Logging.V2.Model.MetricDescriptor do
  @moduledoc """
  Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.

  ## Attributes

  *   `description` (*type:* `String.t`, *default:* `nil`) - A detailed description of the metric, which can be used in documentation.
  *   `displayName` (*type:* `String.t`, *default:* `nil`) - A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
  *   `labels` (*type:* `list(GoogleApi.Logging.V2.Model.LabelDescriptor.t)`, *default:* `nil`) - The set of labels that can be used to describe a specific instance of this metric type. For example, the appengine.googleapis.com/http/server/response_latencies metric type has a label for the HTTP response code, response_code, so you can look at latencies for successful responses or just for responses that failed.
  *   `launchStage` (*type:* `String.t`, *default:* `nil`) - Optional. The launch stage of the metric definition.
  *   `metadata` (*type:* `GoogleApi.Logging.V2.Model.MetricDescriptorMetadata.t`, *default:* `nil`) - Optional. Metadata which can be used to guide usage of the metric.
  *   `metricKind` (*type:* `String.t`, *default:* `nil`) - Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The resource name of the metric descriptor.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name custom.googleapis.com or external.googleapis.com. Metric types should use a natural hierarchical grouping. For example:
      "custom.googleapis.com/invoice/paid/amount"
      "external.googleapis.com/prometheus/up"
      "appengine.googleapis.com/http/server/response_latencies"

  *   `unit` (*type:* `String.t`, *default:* `nil`) - The unit in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of The Unified Code for Units of Measure (http://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT)
      bit bit
      By byte
      s second
      min minute
      h hour
      d dayPrefixes (PREFIX)
      k kilo (10**3)
      M mega (10**6)
      G giga (10**9)
      T tera (10**12)
      P peta (10**15)
      E exa (10**18)
      Z zetta (10**21)
      Y yotta (10**24)
      m milli (10**-3)
      u micro (10**-6)
      n nano (10**-9)
      p pico (10**-12)
      f femto (10**-15)
      a atto (10**-18)
      z zepto (10**-21)
      y yocto (10**-24)
      Ki kibi (2**10)
      Mi mebi (2**20)
      Gi gibi (2**30)
      Ti tebi (2**40)GrammarThe grammar also includes these connectors:
      / division (as an infix operator, e.g. 1/s).
      . multiplication (as an infix operator, e.g. GBy.d)The grammar for a unit is as follows:
      Expression = Component { "." Component } { "/" Component } ;

      Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
                | Annotation
                | "1"
                ;

      Annotation = "{" NAME "}" ;
      Notes:
      Annotation is just a comment if it follows a UNIT and is  equivalent to 1 if it is used alone. For examples,  {requests}/s == 1/s, By{transmitted}/s == By/s.
      NAME is a sequence of non-blank printable ASCII characters not  containing '{' or '}'.
      1 represents dimensionless value 1, such as in 1/s.
      % represents dimensionless value 1/100, and annotates values giving  a percentage.
  *   `valueType` (*type:* `String.t`, *default:* `nil`) - Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :description => String.t(),
          :displayName => String.t(),
          :labels => list(GoogleApi.Logging.V2.Model.LabelDescriptor.t()),
          :launchStage => String.t(),
          :metadata => GoogleApi.Logging.V2.Model.MetricDescriptorMetadata.t(),
          :metricKind => String.t(),
          :name => String.t(),
          :type => String.t(),
          :unit => String.t(),
          :valueType => String.t()
        }

  field(:description)
  field(:displayName)
  field(:labels, as: GoogleApi.Logging.V2.Model.LabelDescriptor, type: :list)
  field(:launchStage)
  field(:metadata, as: GoogleApi.Logging.V2.Model.MetricDescriptorMetadata)
  field(:metricKind)
  field(:name)
  field(:type)
  field(:unit)
  field(:valueType)
end

defimpl Poison.Decoder, for: GoogleApi.Logging.V2.Model.MetricDescriptor do
  def decode(value, options) do
    GoogleApi.Logging.V2.Model.MetricDescriptor.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Logging.V2.Model.MetricDescriptor do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Gmail.V1.Model.WatchRequest do
  @moduledoc """
  Set up or update a new push notification watch on this user's mailbox.

  ## Attributes

  *   `labelFilterAction` (*type:* `String.t`, *default:* `nil`) - Filtering behavior of labelIds list specified.
  *   `labelIds` (*type:* `list(String.t)`, *default:* `nil`) - List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
  *   `topicName` (*type:* `String.t`, *default:* `nil`) - A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format).

      Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :labelFilterAction => String.t(),
          :labelIds => list(String.t()),
          :topicName => String.t()
        }

  field(:labelFilterAction)
  field(:labelIds, type: :list)
  field(:topicName)
end

defimpl Poison.Decoder, for: GoogleApi.Gmail.V1.Model.WatchRequest do
  def decode(value, options) do
    GoogleApi.Gmail.V1.Model.WatchRequest.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Gmail.V1.Model.WatchRequest do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

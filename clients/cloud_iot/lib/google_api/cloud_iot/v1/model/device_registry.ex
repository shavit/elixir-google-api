# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudIot.V1.Model.DeviceRegistry do
  @moduledoc """
  A container for a group of devices.

  ## Attributes

  *   `credentials` (*type:* `list(GoogleApi.CloudIot.V1.Model.RegistryCredential.t)`, *default:* `nil`) - The credentials used to verify the device credentials. No more than 10
      credentials can be bound to a single registry at a time. The verification
      process occurs at the time of device creation or update. If this field is
      empty, no verification is performed. Otherwise, the credentials of a newly
      created device or added credentials of an updated device should be signed
      with one of these registry credentials.

      Note, however, that existing devices will never be affected by
      modifications to this list of credentials: after a device has been
      successfully created in a registry, it should be able to connect even if
      its registry credentials are revoked, deleted, or modified.
  *   `eventNotificationConfigs` (*type:* `list(GoogleApi.CloudIot.V1.Model.EventNotificationConfig.t)`, *default:* `nil`) - The configuration for notification of telemetry events received from the
      device. All telemetry events that were successfully published by the
      device and acknowledged by Cloud IoT Core are guaranteed to be
      delivered to Cloud Pub/Sub. If multiple configurations match a message,
      only the first matching configuration is used. If you try to publish a
      device telemetry event using MQTT without specifying a Cloud Pub/Sub topic
      for the device's registry, the connection closes automatically. If you try
      to do so using an HTTP connection, an error is returned. Up to 10
      configurations may be provided.
  *   `httpConfig` (*type:* `GoogleApi.CloudIot.V1.Model.HttpConfig.t`, *default:* `nil`) - The DeviceService (HTTP) configuration for this device registry.
  *   `id` (*type:* `String.t`, *default:* `nil`) - The identifier of this device registry. For example, `myRegistry`.
  *   `logLevel` (*type:* `String.t`, *default:* `nil`) - **Beta Feature**

      The default logging verbosity for activity from devices in this registry.
      The verbosity level can be overridden by Device.log_level.
  *   `mqttConfig` (*type:* `GoogleApi.CloudIot.V1.Model.MqttConfig.t`, *default:* `nil`) - The MQTT configuration for this device registry.
  *   `name` (*type:* `String.t`, *default:* `nil`) - The resource path name. For example,
      `projects/example-project/locations/us-central1/registries/my-registry`.
  *   `stateNotificationConfig` (*type:* `GoogleApi.CloudIot.V1.Model.StateNotificationConfig.t`, *default:* `nil`) - The configuration for notification of new states received from the device.
      State updates are guaranteed to be stored in the state history, but
      notifications to Cloud Pub/Sub are not guaranteed. For example, if
      permissions are misconfigured or the specified topic doesn't exist, no
      notification will be published but the state will still be stored in Cloud
      IoT Core.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :credentials => list(GoogleApi.CloudIot.V1.Model.RegistryCredential.t()),
          :eventNotificationConfigs =>
            list(GoogleApi.CloudIot.V1.Model.EventNotificationConfig.t()),
          :httpConfig => GoogleApi.CloudIot.V1.Model.HttpConfig.t(),
          :id => String.t(),
          :logLevel => String.t(),
          :mqttConfig => GoogleApi.CloudIot.V1.Model.MqttConfig.t(),
          :name => String.t(),
          :stateNotificationConfig => GoogleApi.CloudIot.V1.Model.StateNotificationConfig.t()
        }

  field(:credentials, as: GoogleApi.CloudIot.V1.Model.RegistryCredential, type: :list)

  field(
    :eventNotificationConfigs,
    as: GoogleApi.CloudIot.V1.Model.EventNotificationConfig,
    type: :list
  )

  field(:httpConfig, as: GoogleApi.CloudIot.V1.Model.HttpConfig)
  field(:id)
  field(:logLevel)
  field(:mqttConfig, as: GoogleApi.CloudIot.V1.Model.MqttConfig)
  field(:name)
  field(:stateNotificationConfig, as: GoogleApi.CloudIot.V1.Model.StateNotificationConfig)
end

defimpl Poison.Decoder, for: GoogleApi.CloudIot.V1.Model.DeviceRegistry do
  def decode(value, options) do
    GoogleApi.CloudIot.V1.Model.DeviceRegistry.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudIot.V1.Model.DeviceRegistry do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

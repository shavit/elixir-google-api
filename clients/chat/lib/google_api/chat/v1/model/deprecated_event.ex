# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Chat.V1.Model.DeprecatedEvent do
  @moduledoc """
  Hangouts Chat events.

  ## Attributes

  *   `action` (*type:* `GoogleApi.Chat.V1.Model.FormAction.t`, *default:* `nil`) - The form action data associated with an interactive card that was clicked.
      Only populated for
      CARD_CLICKED events.
      See the [Interactive Cards guide](/hangouts/chat/how-tos/cards-onclick) for
      more information.
  *   `configCompleteRedirectUrl` (*type:* `String.t`, *default:* `nil`) - The URL the bot should redirect the user to after they have completed an
      authorization or configuration flow outside of Hangouts Chat. See the
      [Authorizing access to 3p services guide](/hangouts/chat/how-tos/auth-3p)
      for more information.
  *   `eventTime` (*type:* `DateTime.t`, *default:* `nil`) - The timestamp indicating when the event was dispatched.
  *   `message` (*type:* `GoogleApi.Chat.V1.Model.Message.t`, *default:* `nil`) - The message that triggered the event, if applicable.
  *   `space` (*type:* `GoogleApi.Chat.V1.Model.Space.t`, *default:* `nil`) - The room or DM in which the event occurred.
  *   `threadKey` (*type:* `String.t`, *default:* `nil`) - The bot-defined key for the thread related to the event. See the
      thread_key field of the
      `spaces.message.create` request for more information.
  *   `token` (*type:* `String.t`, *default:* `nil`) - A secret value that bots can use to verify if a request is from Google. The
      token is randomly generated by Google, remains static, and can be obtained
      from the Hangouts Chat API configuration page in the Cloud Console.
      Developers can revoke/regenerate it if needed from the same page.
  *   `type` (*type:* `String.t`, *default:* `nil`) - The type of the event.
  *   `user` (*type:* `GoogleApi.Chat.V1.Model.User.t`, *default:* `nil`) - The user that triggered the event.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :action => GoogleApi.Chat.V1.Model.FormAction.t(),
          :configCompleteRedirectUrl => String.t(),
          :eventTime => DateTime.t(),
          :message => GoogleApi.Chat.V1.Model.Message.t(),
          :space => GoogleApi.Chat.V1.Model.Space.t(),
          :threadKey => String.t(),
          :token => String.t(),
          :type => String.t(),
          :user => GoogleApi.Chat.V1.Model.User.t()
        }

  field(:action, as: GoogleApi.Chat.V1.Model.FormAction)
  field(:configCompleteRedirectUrl)
  field(:eventTime, as: DateTime)
  field(:message, as: GoogleApi.Chat.V1.Model.Message)
  field(:space, as: GoogleApi.Chat.V1.Model.Space)
  field(:threadKey)
  field(:token)
  field(:type)
  field(:user, as: GoogleApi.Chat.V1.Model.User)
end

defimpl Poison.Decoder, for: GoogleApi.Chat.V1.Model.DeprecatedEvent do
  def decode(value, options) do
    GoogleApi.Chat.V1.Model.DeprecatedEvent.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Chat.V1.Model.DeprecatedEvent do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

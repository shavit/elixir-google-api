# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Model.ContainerPort do
  @moduledoc """
  ContainerPort represents a network port in a single container.

  ## Attributes

  *   `containerPort` (*type:* `integer()`, *default:* `nil`) - Number of port to expose on the pod's IP address.
      This must be a valid port number, 0 < x < 65536.
  *   `hostIP` (*type:* `String.t`, *default:* `nil`) - What host IP to bind the external port to.
      +optional
  *   `hostPort` (*type:* `integer()`, *default:* `nil`) - Number of port to expose on the host.
      If specified, this must be a valid port number, 0 < x < 65536.
      If HostNetwork is specified, this must match ContainerPort.
      Most containers do not need this.
      +optional
  *   `name` (*type:* `String.t`, *default:* `nil`) - If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
      named port in a pod must have a unique name. Name for the port that can be
      referred to by services.
      +optional
  *   `protocol` (*type:* `String.t`, *default:* `nil`) - Protocol for port. Must be UDP or TCP.
      Defaults to "TCP".
      +optional
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :containerPort => integer(),
          :hostIP => String.t(),
          :hostPort => integer(),
          :name => String.t(),
          :protocol => String.t()
        }

  field(:containerPort)
  field(:hostIP)
  field(:hostPort)
  field(:name)
  field(:protocol)
end

defimpl Poison.Decoder, for: GoogleApi.CloudRun.V1alpha1.Model.ContainerPort do
  def decode(value, options) do
    GoogleApi.CloudRun.V1alpha1.Model.ContainerPort.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudRun.V1alpha1.Model.ContainerPort do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

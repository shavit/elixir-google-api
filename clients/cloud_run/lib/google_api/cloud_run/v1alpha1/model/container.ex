# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Model.Container do
  @moduledoc """
  A single application container.
  This specifies both the container to run, the command to run in the container
  and the arguments to supply to it.
  Note that additional arguments may be supplied by the system to the container
  at runtime.

  ## Attributes

  *   `args` (*type:* `list(String.t)`, *default:* `nil`) - Arguments to the entrypoint.
      The docker image's CMD is used if this is not provided.
      Variable references $(VAR_NAME) are expanded using the container's
      environment. If a variable cannot be resolved, the reference in the input
      string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
      double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
      regardless of whether the variable exists or not.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
      +optional
  *   `command` (*type:* `list(String.t)`, *default:* `nil`) - Entrypoint array. Not executed within a shell.
      The docker image's ENTRYPOINT is used if this is not provided.
      Variable references $(VAR_NAME) are expanded using the container's
      environment. If a variable cannot be resolved, the reference in the input
      string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
      double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
      regardless of whether the variable exists or not.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
      +optional
  *   `env` (*type:* `list(GoogleApi.CloudRun.V1alpha1.Model.EnvVar.t)`, *default:* `nil`) - List of environment variables to set in the container.
      Cannot be updated.
      +optional
  *   `envFrom` (*type:* `list(GoogleApi.CloudRun.V1alpha1.Model.EnvFromSource.t)`, *default:* `nil`) - List of sources to populate environment variables in the container.
      The keys defined within a source must be a C_IDENTIFIER. All invalid keys
      will be reported as an event when the container is starting. When a key
      exists in multiple sources, the value associated with the last source will
      take precedence. Values defined by an Env with a duplicate key will take
      precedence. Cannot be updated. +optional
  *   `image` (*type:* `String.t`, *default:* `nil`) - Docker image name.
      More info: https://kubernetes.io/docs/concepts/containers/images
  *   `imagePullPolicy` (*type:* `String.t`, *default:* `nil`) - Image pull policy.
      One of Always, Never, IfNotPresent.
      Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/concepts/containers/images#updating-images
      +optional
  *   `lifecycle` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Lifecycle.t`, *default:* `nil`) - Actions that the management system should take in response to container
      lifecycle events. Cannot be updated. +optional
  *   `livenessProbe` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Probe.t`, *default:* `nil`) - Periodic probe of container liveness.
      Container will be restarted if the probe fails.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
      +optional
  *   `name` (*type:* `String.t`, *default:* `nil`) - Name of the container specified as a DNS_LABEL.
      Each container must have a unique name (DNS_LABEL).
      Cannot be updated.
  *   `ports` (*type:* `list(GoogleApi.CloudRun.V1alpha1.Model.ContainerPort.t)`, *default:* `nil`) - List of ports to expose from the container. Exposing a port here gives
      the system additional information about the network connections a
      container uses, but is primarily informational. Not specifying a port here
      DOES NOT prevent that port from being exposed. Any port which is
      listening on the default "0.0.0.0" address inside a container will be
      accessible from the network.
      Cannot be updated.
      +optional
  *   `readinessProbe` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Probe.t`, *default:* `nil`) - Periodic probe of container service readiness.
      Container will be removed from service endpoints if the probe fails.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
      +optional
  *   `resources` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.ResourceRequirements.t`, *default:* `nil`) - Compute Resources required by this container.
      Cannot be updated.
      More info:
      https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
      +optional
  *   `securityContext` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.SecurityContext.t`, *default:* `nil`) - Security options the pod should run with.
      More info: https://kubernetes.io/docs/concepts/policy/security-context/
      More info:
      https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
      +optional
  *   `stdin` (*type:* `boolean()`, *default:* `nil`) - Whether this container should allocate a buffer for stdin in the container
      runtime. If this is not set, reads from stdin in the container will always
      result in EOF. Default is false. +optional
  *   `stdinOnce` (*type:* `boolean()`, *default:* `nil`) - Whether the container runtime should close the stdin channel after it has
      been opened by a single attach. When stdin is true the stdin stream will
      remain open across multiple attach sessions. If stdinOnce is set to true,
      stdin is opened on container start, is empty until the first client
      attaches to stdin, and then remains open and accepts data until the client
      disconnects, at which time stdin is closed and remains closed until the
      container is restarted. If this flag is false, a container processes that
      reads from stdin will never receive an EOF. Default is false +optional
  *   `terminationMessagePath` (*type:* `String.t`, *default:* `nil`) - Optional: Path at which the file to which the container's termination
      message will be written is mounted into the container's filesystem. Message
      written is intended to be brief final status, such as an assertion failure
      message. Will be truncated by the node if greater than 4096 bytes. The
      total message length across all containers will be limited to 12kb.
      Defaults to /dev/termination-log.
      Cannot be updated.
      +optional
  *   `terminationMessagePolicy` (*type:* `String.t`, *default:* `nil`) - Indicate how the termination message should be populated. File will use the
      contents of terminationMessagePath to populate the container status message
      on both success and failure. FallbackToLogsOnError will use the last chunk
      of container log output if the termination message file is empty and the
      container exited with an error. The log output is limited to 2048 bytes or
      80 lines, whichever is smaller. Defaults to File. Cannot be updated.
      +optional
  *   `tty` (*type:* `boolean()`, *default:* `nil`) - Whether this container should allocate a TTY for itself, also requires
      'stdin' to be true. Default is false. +optional
  *   `volumeDevices` (*type:* `list(GoogleApi.CloudRun.V1alpha1.Model.VolumeDevice.t)`, *default:* `nil`) - volumeDevices is the list of block devices to be used by the container.
      This is an alpha feature and may change in the future.
      +optional
  *   `volumeMounts` (*type:* `list(GoogleApi.CloudRun.V1alpha1.Model.VolumeMount.t)`, *default:* `nil`) - Pod volumes to mount into the container's filesystem.
      Cannot be updated.
      +optional
  *   `workingDir` (*type:* `String.t`, *default:* `nil`) - Container's working directory.
      If not specified, the container runtime's default will be used, which
      might be configured in the container image.
      Cannot be updated.
      +optional
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :args => list(String.t()),
          :command => list(String.t()),
          :env => list(GoogleApi.CloudRun.V1alpha1.Model.EnvVar.t()),
          :envFrom => list(GoogleApi.CloudRun.V1alpha1.Model.EnvFromSource.t()),
          :image => String.t(),
          :imagePullPolicy => String.t(),
          :lifecycle => GoogleApi.CloudRun.V1alpha1.Model.Lifecycle.t(),
          :livenessProbe => GoogleApi.CloudRun.V1alpha1.Model.Probe.t(),
          :name => String.t(),
          :ports => list(GoogleApi.CloudRun.V1alpha1.Model.ContainerPort.t()),
          :readinessProbe => GoogleApi.CloudRun.V1alpha1.Model.Probe.t(),
          :resources => GoogleApi.CloudRun.V1alpha1.Model.ResourceRequirements.t(),
          :securityContext => GoogleApi.CloudRun.V1alpha1.Model.SecurityContext.t(),
          :stdin => boolean(),
          :stdinOnce => boolean(),
          :terminationMessagePath => String.t(),
          :terminationMessagePolicy => String.t(),
          :tty => boolean(),
          :volumeDevices => list(GoogleApi.CloudRun.V1alpha1.Model.VolumeDevice.t()),
          :volumeMounts => list(GoogleApi.CloudRun.V1alpha1.Model.VolumeMount.t()),
          :workingDir => String.t()
        }

  field(:args, type: :list)
  field(:command, type: :list)
  field(:env, as: GoogleApi.CloudRun.V1alpha1.Model.EnvVar, type: :list)
  field(:envFrom, as: GoogleApi.CloudRun.V1alpha1.Model.EnvFromSource, type: :list)
  field(:image)
  field(:imagePullPolicy)
  field(:lifecycle, as: GoogleApi.CloudRun.V1alpha1.Model.Lifecycle)
  field(:livenessProbe, as: GoogleApi.CloudRun.V1alpha1.Model.Probe)
  field(:name)
  field(:ports, as: GoogleApi.CloudRun.V1alpha1.Model.ContainerPort, type: :list)
  field(:readinessProbe, as: GoogleApi.CloudRun.V1alpha1.Model.Probe)
  field(:resources, as: GoogleApi.CloudRun.V1alpha1.Model.ResourceRequirements)
  field(:securityContext, as: GoogleApi.CloudRun.V1alpha1.Model.SecurityContext)
  field(:stdin)
  field(:stdinOnce)
  field(:terminationMessagePath)
  field(:terminationMessagePolicy)
  field(:tty)
  field(:volumeDevices, as: GoogleApi.CloudRun.V1alpha1.Model.VolumeDevice, type: :list)
  field(:volumeMounts, as: GoogleApi.CloudRun.V1alpha1.Model.VolumeMount, type: :list)
  field(:workingDir)
end

defimpl Poison.Decoder, for: GoogleApi.CloudRun.V1alpha1.Model.Container do
  def decode(value, options) do
    GoogleApi.CloudRun.V1alpha1.Model.Container.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudRun.V1alpha1.Model.Container do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Model.SecurityContext do
  @moduledoc """
  SecurityContext holds security configuration that will be applied to a
  container. Some fields are present in both SecurityContext and
  PodSecurityContext.  When both are set, the values in SecurityContext take
  precedence.

  ## Attributes

  *   `allowPrivilegeEscalation` (*type:* `boolean()`, *default:* `nil`) - AllowPrivilegeEscalation controls whether a process can gain more
      privileges than its parent process. This bool directly controls if
      the no_new_privs flag will be set on the container process.
      AllowPrivilegeEscalation is true always when the container is:
      1) run as Privileged
      2) has CAP_SYS_ADMIN
      +optional
  *   `capabilities` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.Capabilities.t`, *default:* `nil`) - The capabilities to add/drop when running containers.
      Defaults to the default set of capabilities granted by the container
      runtime. +optional
  *   `privileged` (*type:* `boolean()`, *default:* `nil`) - Run container in privileged mode.
      Processes in privileged containers are essentially equivalent to root on
      the host. Defaults to false. +optional
  *   `readOnlyRootFilesystem` (*type:* `boolean()`, *default:* `nil`) - Whether this container has a read-only root filesystem.
      Default is false.
      +optional
  *   `runAsGroup` (*type:* `integer()`, *default:* `nil`) - The GID to run the entrypoint of the container process.
      Uses runtime default if unset.
      May also be set in PodSecurityContext.  If set in both SecurityContext and
      PodSecurityContext, the value specified in SecurityContext takes
      precedence. +optional
  *   `runAsNonRoot` (*type:* `boolean()`, *default:* `nil`) - Indicates that the container must run as a non-root user.
      If true, the Kubelet will validate the image at runtime to ensure that it
      does not run as UID 0 (root) and fail to start the container if it does.
      If unset or false, no such validation will be performed.
      May also be set in PodSecurityContext.  If set in both SecurityContext and
      PodSecurityContext, the value specified in SecurityContext takes
      precedence. +optional
  *   `runAsUser` (*type:* `integer()`, *default:* `nil`) - The UID to run the entrypoint of the container process.
      Defaults to user specified in image metadata if unspecified.
      May also be set in PodSecurityContext.  If set in both SecurityContext and
      PodSecurityContext, the value specified in SecurityContext takes
      precedence. +optional
  *   `seLinuxOptions` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.SELinuxOptions.t`, *default:* `nil`) - The SELinux context to be applied to the container.
      If unspecified, the container runtime will allocate a random SELinux
      context for each container.  May also be set in PodSecurityContext.  If set
      in both SecurityContext and PodSecurityContext, the value specified in
      SecurityContext takes precedence. +optional
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :allowPrivilegeEscalation => boolean(),
          :capabilities => GoogleApi.CloudRun.V1alpha1.Model.Capabilities.t(),
          :privileged => boolean(),
          :readOnlyRootFilesystem => boolean(),
          :runAsGroup => integer(),
          :runAsNonRoot => boolean(),
          :runAsUser => integer(),
          :seLinuxOptions => GoogleApi.CloudRun.V1alpha1.Model.SELinuxOptions.t()
        }

  field(:allowPrivilegeEscalation)
  field(:capabilities, as: GoogleApi.CloudRun.V1alpha1.Model.Capabilities)
  field(:privileged)
  field(:readOnlyRootFilesystem)
  field(:runAsGroup)
  field(:runAsNonRoot)
  field(:runAsUser)
  field(:seLinuxOptions, as: GoogleApi.CloudRun.V1alpha1.Model.SELinuxOptions)
end

defimpl Poison.Decoder, for: GoogleApi.CloudRun.V1alpha1.Model.SecurityContext do
  def decode(value, options) do
    GoogleApi.CloudRun.V1alpha1.Model.SecurityContext.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudRun.V1alpha1.Model.SecurityContext do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudRun.V1alpha1.Model.SubscriberSpec do
  @moduledoc """


  ## Attributes

  *   `ref` (*type:* `GoogleApi.CloudRun.V1alpha1.Model.ObjectReference.t`, *default:* `nil`) - Reference to an object that will be used to find the target
      endpoint, which should implement the Addressable duck type.
      For example, this could be a reference to a Route resource
      or a Knative Service resource.
  *   `uri` (*type:* `String.t`, *default:* `nil`) - Reference to a 'known' endpoint where no resolving is done.
      http://k8s-service for example
      http://myexternalhandler.example.com/foo/bar
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :ref => GoogleApi.CloudRun.V1alpha1.Model.ObjectReference.t(),
          :uri => String.t()
        }

  field(:ref, as: GoogleApi.CloudRun.V1alpha1.Model.ObjectReference)
  field(:uri)
end

defimpl Poison.Decoder, for: GoogleApi.CloudRun.V1alpha1.Model.SubscriberSpec do
  def decode(value, options) do
    GoogleApi.CloudRun.V1alpha1.Model.SubscriberSpec.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudRun.V1alpha1.Model.SubscriberSpec do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

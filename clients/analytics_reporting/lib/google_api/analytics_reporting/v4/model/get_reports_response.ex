# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.AnalyticsReporting.V4.Model.GetReportsResponse do
  @moduledoc """
  The main response class which holds the reports from the Reporting API
  `batchGet` call.

  ## Attributes

  *   `queryCost` (*type:* `integer()`, *default:* `nil`) - The amount of resource quota tokens deducted to execute the query. Includes
      all responses.
  *   `reports` (*type:* `list(GoogleApi.AnalyticsReporting.V4.Model.Report.t)`, *default:* `nil`) - Responses corresponding to each of the request.
  *   `resourceQuotasRemaining` (*type:* `GoogleApi.AnalyticsReporting.V4.Model.ResourceQuotasRemaining.t`, *default:* `nil`) - The amount of resource quota remaining for the property.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :queryCost => integer(),
          :reports => list(GoogleApi.AnalyticsReporting.V4.Model.Report.t()),
          :resourceQuotasRemaining =>
            GoogleApi.AnalyticsReporting.V4.Model.ResourceQuotasRemaining.t()
        }

  field(:queryCost)
  field(:reports, as: GoogleApi.AnalyticsReporting.V4.Model.Report, type: :list)

  field(
    :resourceQuotasRemaining,
    as: GoogleApi.AnalyticsReporting.V4.Model.ResourceQuotasRemaining
  )
end

defimpl Poison.Decoder, for: GoogleApi.AnalyticsReporting.V4.Model.GetReportsResponse do
  def decode(value, options) do
    GoogleApi.AnalyticsReporting.V4.Model.GetReportsResponse.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AnalyticsReporting.V4.Model.GetReportsResponse do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end

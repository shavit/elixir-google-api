{{>licenseInfo}}
defmodule {{moduleName}}.Api.{{classname}} do
  @moduledoc """
  API calls for all endpoints tagged `{{baseName}}`.
  """

  alias {{moduleName}}.Connection
  alias GoogleApi.Gax.{Request, Response}

{{#operations}}
  {{#operation}}

  @doc """
  {{#summary}}
  {{summary}}
  {{/summary}}
  {{#notes}}
  {{notes}}
  {{/notes}}

  ## Parameters

  - connection ({{moduleName}}.Connection): Connection to server
{{#allParams}}{{#required}}  - {{#underscored}}{{paramName}}{{/underscored}} ({{dataType}}): {{description}}
{{/required}}{{/allParams}}  - optional_params (KeywordList): [optional] Optional parameters
{{#allParams}}{{^required}}    - :{{baseName}} ({{dataType}}): {{description}}
{{/required}}{{/allParams}}
  ## Returns

  {:ok, {{#isListContainer}}[%{{returnBaseType}}{}, ...]{{/isListContainer}}{{#isMapContainer}}%{}{{/isMapContainer}}{{^returnType}}%{}{{/returnType}}{{#returnSimpleType}}%{{#returnType}}{{#isMapContainer}}{{/isMapContainer}}{{moduleName}}.Model.{{{returnType}}}{{/returnType}}{}{{/returnSimpleType}}} on success
  {:error, info} on failure
  """
  {{typespec}}
  def {{#underscored}}{{operationId}}{{/underscored}}(connection, {{#allParams}}{{#required}}{{#underscored}}{{paramName}}{{/underscored}}, {{/required}}{{/allParams}}{{^hasOptionalParams}}_{{/hasOptionalParams}}optional_params \\ [], opts \\ []) do
{{#hasOptionalParams}}
    optional_params_config = %{
      {{#allParams}}{{^required}}{{^isPathParam}}:"{{baseName}}" => {{#isBodyParam}}:body{{/isBodyParam}}{{#isFormParam}}:body{{/isFormParam}}{{#isQueryParam}}:query{{/isQueryParam}}{{#isHeaderParam}}:header{{/isHeaderParam}}{{/isPathParam}}{{#hasMore}},
      {{/hasMore}}{{/required}}{{/allParams}}
    }
{{/hasOptionalParams}}
    request =
      Request.new
      |> Request.method(:{{#underscored}}{{httpMethod}}{{/underscored}})
      |> Request.url("{{path}}"{{#hasPathParams}}, %{
{{#pathParams}}         "{{baseName}}" => {{^vendorExtensions.x-allowedReserved}}{{#isString}}URI.encode({{/isString}}{{/vendorExtensions.x-allowedReserved}}{{#underscored}}{{paramName}}{{/underscored}}{{^vendorExtensions.x-allowedReserved}}{{#isString}}, &URI.char_unreserved?/1){{/isString}}{{/vendorExtensions.x-allowedReserved}}{{#hasMore}},{{/hasMore}}
{{/pathParams}}       }{{/hasPathParams}})
{{#allParams}}
{{#required}}
{{^isPathParam}}      |> Request.add_param({{#isBodyParam}}:body{{/isBodyParam}}{{#isFormParam}}{{#isMultipart}}{{#isFile}}:file{{/isFile}}{{^isFile}}:body{{/isFile}}{{/isMultipart}}{{^isMultipart}}:body{{/isMultipart}}{{/isFormParam}}{{#isQueryParam}}:query{{/isQueryParam}}{{#isHeaderParam}}:header{{/isHeaderParam}}, :"{{baseName}}", {{#underscored}}{{paramName}}{{/underscored}})
{{/isPathParam}}
{{/required}}
{{/allParams}}
{{#hasOptionalParams}}
      |> Request.add_optional_params(optional_params_config, optional_params)
{{/hasOptionalParams}}

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [{{^returnBaseType}}decode: false{{/returnBaseType}}{{#returnBaseType}}struct: {{decodedStruct}}{{/returnBaseType}}{{#vendorExtensions.x-dataWrapper}}, data_wrapped: true{{/vendorExtensions.x-dataWrapper}}])
  end
  {{/operation}}
{{/operations}}
end
